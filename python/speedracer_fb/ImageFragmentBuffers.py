# automatically generated by the FlatBuffers compiler, do not modify

# namespace: speedracer_fb

import flatbuffers

class ImageFragmentBuffers(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsImageFragmentBuffers(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ImageFragmentBuffers()
        x.Init(buf, n + offset)
        return x

    # ImageFragmentBuffers
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ImageFragmentBuffers
    def Extents(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Viewport import Viewport
            obj = Viewport()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ImageFragmentBuffers
    def Pixels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .DataBuffer import DataBuffer
            obj = DataBuffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ImageFragmentBuffers
    def Depth(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .DataBuffer import DataBuffer
            obj = DataBuffer()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ImageFragmentBuffersStart(builder): builder.StartObject(3)
def ImageFragmentBuffersAddExtents(builder, extents): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(extents), 0)
def ImageFragmentBuffersAddPixels(builder, pixels): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pixels), 0)
def ImageFragmentBuffersAddDepth(builder, depth): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(depth), 0)
def ImageFragmentBuffersEnd(builder): return builder.EndObject()
