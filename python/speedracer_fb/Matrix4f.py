# automatically generated by the FlatBuffers compiler, do not modify

# namespace: speedracer_fb

import flatbuffers

class Matrix4f(object):
    __slots__ = ['_tab']

    # Matrix4f
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Matrix4f
    def BasisX(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 0)
        return obj

    # Matrix4f
    def BasisY(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 12)
        return obj

    # Matrix4f
    def T(self, obj):
        obj.Init(self._tab.Bytes, self._tab.Pos + 24)
        return obj

    # Matrix4f
    def S(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(36))

def CreateMatrix4f(builder, basis_x_x, basis_x_y, basis_x_z, basis_y_x, basis_y_y, basis_y_z, t_x, t_y, t_z, s):
    builder.Prep(4, 40)
    builder.PrependFloat32(s)
    builder.Prep(4, 12)
    builder.PrependFloat32(t_z)
    builder.PrependFloat32(t_y)
    builder.PrependFloat32(t_x)
    builder.Prep(4, 12)
    builder.PrependFloat32(basis_y_z)
    builder.PrependFloat32(basis_y_y)
    builder.PrependFloat32(basis_y_x)
    builder.Prep(4, 12)
    builder.PrependFloat32(basis_x_z)
    builder.PrependFloat32(basis_x_y)
    builder.PrependFloat32(basis_x_x)
    return builder.Offset()
