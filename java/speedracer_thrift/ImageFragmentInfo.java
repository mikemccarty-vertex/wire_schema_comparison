/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-23")
public class ImageFragmentInfo implements org.apache.thrift.TBase<ImageFragmentInfo, ImageFragmentInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ImageFragmentInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageFragmentInfo");

  private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BOUNDS_FIELD_DESC = new org.apache.thrift.protocol.TField("bounds", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField IS_OPAQUE_FIELD_DESC = new org.apache.thrift.protocol.TField("isOpaque", org.apache.thrift.protocol.TType.BOOL, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageFragmentInfoStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageFragmentInfoTupleSchemeFactory();

  public java.lang.String key; // required
  public BoundingBox2i bounds; // required
  public boolean isOpaque; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KEY((short)1, "key"),
    BOUNDS((short)2, "bounds"),
    IS_OPAQUE((short)3, "isOpaque");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KEY
          return KEY;
        case 2: // BOUNDS
          return BOUNDS;
        case 3: // IS_OPAQUE
          return IS_OPAQUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISOPAQUE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOUNDS, new org.apache.thrift.meta_data.FieldMetaData("bounds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BoundingBox2i.class)));
    tmpMap.put(_Fields.IS_OPAQUE, new org.apache.thrift.meta_data.FieldMetaData("isOpaque", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageFragmentInfo.class, metaDataMap);
  }

  public ImageFragmentInfo() {
    this.isOpaque = false;

  }

  public ImageFragmentInfo(
    java.lang.String key,
    BoundingBox2i bounds,
    boolean isOpaque)
  {
    this();
    this.key = key;
    this.bounds = bounds;
    this.isOpaque = isOpaque;
    setIsOpaqueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageFragmentInfo(ImageFragmentInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetKey()) {
      this.key = other.key;
    }
    if (other.isSetBounds()) {
      this.bounds = new BoundingBox2i(other.bounds);
    }
    this.isOpaque = other.isOpaque;
  }

  public ImageFragmentInfo deepCopy() {
    return new ImageFragmentInfo(this);
  }

  @Override
  public void clear() {
    this.key = null;
    this.bounds = null;
    this.isOpaque = false;

  }

  public java.lang.String getKey() {
    return this.key;
  }

  public ImageFragmentInfo setKey(java.lang.String key) {
    this.key = key;
    return this;
  }

  public void unsetKey() {
    this.key = null;
  }

  /** Returns true if field key is set (has been assigned a value) and false otherwise */
  public boolean isSetKey() {
    return this.key != null;
  }

  public void setKeyIsSet(boolean value) {
    if (!value) {
      this.key = null;
    }
  }

  public BoundingBox2i getBounds() {
    return this.bounds;
  }

  public ImageFragmentInfo setBounds(BoundingBox2i bounds) {
    this.bounds = bounds;
    return this;
  }

  public void unsetBounds() {
    this.bounds = null;
  }

  /** Returns true if field bounds is set (has been assigned a value) and false otherwise */
  public boolean isSetBounds() {
    return this.bounds != null;
  }

  public void setBoundsIsSet(boolean value) {
    if (!value) {
      this.bounds = null;
    }
  }

  public boolean isIsOpaque() {
    return this.isOpaque;
  }

  public ImageFragmentInfo setIsOpaque(boolean isOpaque) {
    this.isOpaque = isOpaque;
    setIsOpaqueIsSet(true);
    return this;
  }

  public void unsetIsOpaque() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISOPAQUE_ISSET_ID);
  }

  /** Returns true if field isOpaque is set (has been assigned a value) and false otherwise */
  public boolean isSetIsOpaque() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISOPAQUE_ISSET_ID);
  }

  public void setIsOpaqueIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISOPAQUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case KEY:
      if (value == null) {
        unsetKey();
      } else {
        setKey((java.lang.String)value);
      }
      break;

    case BOUNDS:
      if (value == null) {
        unsetBounds();
      } else {
        setBounds((BoundingBox2i)value);
      }
      break;

    case IS_OPAQUE:
      if (value == null) {
        unsetIsOpaque();
      } else {
        setIsOpaque((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case KEY:
      return getKey();

    case BOUNDS:
      return getBounds();

    case IS_OPAQUE:
      return isIsOpaque();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case KEY:
      return isSetKey();
    case BOUNDS:
      return isSetBounds();
    case IS_OPAQUE:
      return isSetIsOpaque();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageFragmentInfo)
      return this.equals((ImageFragmentInfo)that);
    return false;
  }

  public boolean equals(ImageFragmentInfo that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_key = true && this.isSetKey();
    boolean that_present_key = true && that.isSetKey();
    if (this_present_key || that_present_key) {
      if (!(this_present_key && that_present_key))
        return false;
      if (!this.key.equals(that.key))
        return false;
    }

    boolean this_present_bounds = true && this.isSetBounds();
    boolean that_present_bounds = true && that.isSetBounds();
    if (this_present_bounds || that_present_bounds) {
      if (!(this_present_bounds && that_present_bounds))
        return false;
      if (!this.bounds.equals(that.bounds))
        return false;
    }

    boolean this_present_isOpaque = true;
    boolean that_present_isOpaque = true;
    if (this_present_isOpaque || that_present_isOpaque) {
      if (!(this_present_isOpaque && that_present_isOpaque))
        return false;
      if (this.isOpaque != that.isOpaque)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
    if (isSetKey())
      hashCode = hashCode * 8191 + key.hashCode();

    hashCode = hashCode * 8191 + ((isSetBounds()) ? 131071 : 524287);
    if (isSetBounds())
      hashCode = hashCode * 8191 + bounds.hashCode();

    hashCode = hashCode * 8191 + ((isOpaque) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(ImageFragmentInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBounds()).compareTo(other.isSetBounds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBounds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bounds, other.bounds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsOpaque()).compareTo(other.isSetIsOpaque());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsOpaque()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isOpaque, other.isOpaque);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageFragmentInfo(");
    boolean first = true;

    sb.append("key:");
    if (this.key == null) {
      sb.append("null");
    } else {
      sb.append(this.key);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("bounds:");
    if (this.bounds == null) {
      sb.append("null");
    } else {
      sb.append(this.bounds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isOpaque:");
    sb.append(this.isOpaque);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (bounds != null) {
      bounds.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageFragmentInfoStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageFragmentInfoStandardScheme getScheme() {
      return new ImageFragmentInfoStandardScheme();
    }
  }

  private static class ImageFragmentInfoStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageFragmentInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageFragmentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.key = iprot.readString();
              struct.setKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOUNDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.bounds = new BoundingBox2i();
              struct.bounds.read(iprot);
              struct.setBoundsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_OPAQUE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isOpaque = iprot.readBool();
              struct.setIsOpaqueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageFragmentInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.key != null) {
        oprot.writeFieldBegin(KEY_FIELD_DESC);
        oprot.writeString(struct.key);
        oprot.writeFieldEnd();
      }
      if (struct.bounds != null) {
        oprot.writeFieldBegin(BOUNDS_FIELD_DESC);
        struct.bounds.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_OPAQUE_FIELD_DESC);
      oprot.writeBool(struct.isOpaque);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageFragmentInfoTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageFragmentInfoTupleScheme getScheme() {
      return new ImageFragmentInfoTupleScheme();
    }
  }

  private static class ImageFragmentInfoTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageFragmentInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageFragmentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetKey()) {
        optionals.set(0);
      }
      if (struct.isSetBounds()) {
        optionals.set(1);
      }
      if (struct.isSetIsOpaque()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetKey()) {
        oprot.writeString(struct.key);
      }
      if (struct.isSetBounds()) {
        struct.bounds.write(oprot);
      }
      if (struct.isSetIsOpaque()) {
        oprot.writeBool(struct.isOpaque);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageFragmentInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.key = iprot.readString();
        struct.setKeyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.bounds = new BoundingBox2i();
        struct.bounds.read(iprot);
        struct.setBoundsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isOpaque = iprot.readBool();
        struct.setIsOpaqueIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

