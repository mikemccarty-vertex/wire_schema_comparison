/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-23")
public class Color3f implements org.apache.thrift.TBase<Color3f, Color3f._Fields>, java.io.Serializable, Cloneable, Comparable<Color3f> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Color3f");

  private static final org.apache.thrift.protocol.TField R_FIELD_DESC = new org.apache.thrift.protocol.TField("r", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField G_FIELD_DESC = new org.apache.thrift.protocol.TField("g", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.DOUBLE, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Color3fStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Color3fTupleSchemeFactory();

  public double r; // required
  public double g; // required
  public double b; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    R((short)1, "r"),
    G((short)2, "g"),
    B((short)3, "b");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // R
          return R;
        case 2: // G
          return G;
        case 3: // B
          return B;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __R_ISSET_ID = 0;
  private static final int __G_ISSET_ID = 1;
  private static final int __B_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.R, new org.apache.thrift.meta_data.FieldMetaData("r", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.G, new org.apache.thrift.meta_data.FieldMetaData("g", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Color3f.class, metaDataMap);
  }

  public Color3f() {
    this.r = (double)0;

    this.g = (double)0;

    this.b = (double)0;

  }

  public Color3f(
    double r,
    double g,
    double b)
  {
    this();
    this.r = r;
    setRIsSet(true);
    this.g = g;
    setGIsSet(true);
    this.b = b;
    setBIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Color3f(Color3f other) {
    __isset_bitfield = other.__isset_bitfield;
    this.r = other.r;
    this.g = other.g;
    this.b = other.b;
  }

  public Color3f deepCopy() {
    return new Color3f(this);
  }

  @Override
  public void clear() {
    this.r = (double)0;

    this.g = (double)0;

    this.b = (double)0;

  }

  public double getR() {
    return this.r;
  }

  public Color3f setR(double r) {
    this.r = r;
    setRIsSet(true);
    return this;
  }

  public void unsetR() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __R_ISSET_ID);
  }

  /** Returns true if field r is set (has been assigned a value) and false otherwise */
  public boolean isSetR() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __R_ISSET_ID);
  }

  public void setRIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __R_ISSET_ID, value);
  }

  public double getG() {
    return this.g;
  }

  public Color3f setG(double g) {
    this.g = g;
    setGIsSet(true);
    return this;
  }

  public void unsetG() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __G_ISSET_ID);
  }

  /** Returns true if field g is set (has been assigned a value) and false otherwise */
  public boolean isSetG() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __G_ISSET_ID);
  }

  public void setGIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __G_ISSET_ID, value);
  }

  public double getB() {
    return this.b;
  }

  public Color3f setB(double b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case R:
      if (value == null) {
        unsetR();
      } else {
        setR((java.lang.Double)value);
      }
      break;

    case G:
      if (value == null) {
        unsetG();
      } else {
        setG((java.lang.Double)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case R:
      return getR();

    case G:
      return getG();

    case B:
      return getB();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case R:
      return isSetR();
    case G:
      return isSetG();
    case B:
      return isSetB();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Color3f)
      return this.equals((Color3f)that);
    return false;
  }

  public boolean equals(Color3f that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_r = true;
    boolean that_present_r = true;
    if (this_present_r || that_present_r) {
      if (!(this_present_r && that_present_r))
        return false;
      if (this.r != that.r)
        return false;
    }

    boolean this_present_g = true;
    boolean that_present_g = true;
    if (this_present_g || that_present_g) {
      if (!(this_present_g && that_present_g))
        return false;
      if (this.g != that.g)
        return false;
    }

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(r);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(g);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(b);

    return hashCode;
  }

  @Override
  public int compareTo(Color3f other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetR()).compareTo(other.isSetR());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetR()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.r, other.r);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetG()).compareTo(other.isSetG());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetG()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.g, other.g);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Color3f(");
    boolean first = true;

    sb.append("r:");
    sb.append(this.r);
    first = false;
    if (!first) sb.append(", ");
    sb.append("g:");
    sb.append(this.g);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b:");
    sb.append(this.b);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Color3fStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Color3fStandardScheme getScheme() {
      return new Color3fStandardScheme();
    }
  }

  private static class Color3fStandardScheme extends org.apache.thrift.scheme.StandardScheme<Color3f> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Color3f struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // R
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.r = iprot.readDouble();
              struct.setRIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // G
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.g = iprot.readDouble();
              struct.setGIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.b = iprot.readDouble();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Color3f struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(R_FIELD_DESC);
      oprot.writeDouble(struct.r);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(G_FIELD_DESC);
      oprot.writeDouble(struct.g);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B_FIELD_DESC);
      oprot.writeDouble(struct.b);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Color3fTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Color3fTupleScheme getScheme() {
      return new Color3fTupleScheme();
    }
  }

  private static class Color3fTupleScheme extends org.apache.thrift.scheme.TupleScheme<Color3f> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Color3f struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetR()) {
        optionals.set(0);
      }
      if (struct.isSetG()) {
        optionals.set(1);
      }
      if (struct.isSetB()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetR()) {
        oprot.writeDouble(struct.r);
      }
      if (struct.isSetG()) {
        oprot.writeDouble(struct.g);
      }
      if (struct.isSetB()) {
        oprot.writeDouble(struct.b);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Color3f struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.r = iprot.readDouble();
        struct.setRIsSet(true);
      }
      if (incoming.get(1)) {
        struct.g = iprot.readDouble();
        struct.setGIsSet(true);
      }
      if (incoming.get(2)) {
        struct.b = iprot.readDouble();
        struct.setBIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

