/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-23")
public class ImageFragmentBuffers implements org.apache.thrift.TBase<ImageFragmentBuffers, ImageFragmentBuffers._Fields>, java.io.Serializable, Cloneable, Comparable<ImageFragmentBuffers> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageFragmentBuffers");

  private static final org.apache.thrift.protocol.TField EXTENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("extents", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField PIXELS_FIELD_DESC = new org.apache.thrift.protocol.TField("pixels", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField DEPTH_FIELD_DESC = new org.apache.thrift.protocol.TField("depth", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageFragmentBuffersStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageFragmentBuffersTupleSchemeFactory();

  public Viewport extents; // required
  public DataBuffer pixels; // required
  public DataBuffer depth; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXTENTS((short)1, "extents"),
    PIXELS((short)2, "pixels"),
    DEPTH((short)3, "depth");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXTENTS
          return EXTENTS;
        case 2: // PIXELS
          return PIXELS;
        case 3: // DEPTH
          return DEPTH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXTENTS, new org.apache.thrift.meta_data.FieldMetaData("extents", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Viewport.class)));
    tmpMap.put(_Fields.PIXELS, new org.apache.thrift.meta_data.FieldMetaData("pixels", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataBuffer.class)));
    tmpMap.put(_Fields.DEPTH, new org.apache.thrift.meta_data.FieldMetaData("depth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DataBuffer.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageFragmentBuffers.class, metaDataMap);
  }

  public ImageFragmentBuffers() {
  }

  public ImageFragmentBuffers(
    Viewport extents,
    DataBuffer pixels,
    DataBuffer depth)
  {
    this();
    this.extents = extents;
    this.pixels = pixels;
    this.depth = depth;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageFragmentBuffers(ImageFragmentBuffers other) {
    if (other.isSetExtents()) {
      this.extents = new Viewport(other.extents);
    }
    if (other.isSetPixels()) {
      this.pixels = new DataBuffer(other.pixels);
    }
    if (other.isSetDepth()) {
      this.depth = new DataBuffer(other.depth);
    }
  }

  public ImageFragmentBuffers deepCopy() {
    return new ImageFragmentBuffers(this);
  }

  @Override
  public void clear() {
    this.extents = null;
    this.pixels = null;
    this.depth = null;
  }

  public Viewport getExtents() {
    return this.extents;
  }

  public ImageFragmentBuffers setExtents(Viewport extents) {
    this.extents = extents;
    return this;
  }

  public void unsetExtents() {
    this.extents = null;
  }

  /** Returns true if field extents is set (has been assigned a value) and false otherwise */
  public boolean isSetExtents() {
    return this.extents != null;
  }

  public void setExtentsIsSet(boolean value) {
    if (!value) {
      this.extents = null;
    }
  }

  public DataBuffer getPixels() {
    return this.pixels;
  }

  public ImageFragmentBuffers setPixels(DataBuffer pixels) {
    this.pixels = pixels;
    return this;
  }

  public void unsetPixels() {
    this.pixels = null;
  }

  /** Returns true if field pixels is set (has been assigned a value) and false otherwise */
  public boolean isSetPixels() {
    return this.pixels != null;
  }

  public void setPixelsIsSet(boolean value) {
    if (!value) {
      this.pixels = null;
    }
  }

  public DataBuffer getDepth() {
    return this.depth;
  }

  public ImageFragmentBuffers setDepth(DataBuffer depth) {
    this.depth = depth;
    return this;
  }

  public void unsetDepth() {
    this.depth = null;
  }

  /** Returns true if field depth is set (has been assigned a value) and false otherwise */
  public boolean isSetDepth() {
    return this.depth != null;
  }

  public void setDepthIsSet(boolean value) {
    if (!value) {
      this.depth = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EXTENTS:
      if (value == null) {
        unsetExtents();
      } else {
        setExtents((Viewport)value);
      }
      break;

    case PIXELS:
      if (value == null) {
        unsetPixels();
      } else {
        setPixels((DataBuffer)value);
      }
      break;

    case DEPTH:
      if (value == null) {
        unsetDepth();
      } else {
        setDepth((DataBuffer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EXTENTS:
      return getExtents();

    case PIXELS:
      return getPixels();

    case DEPTH:
      return getDepth();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EXTENTS:
      return isSetExtents();
    case PIXELS:
      return isSetPixels();
    case DEPTH:
      return isSetDepth();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageFragmentBuffers)
      return this.equals((ImageFragmentBuffers)that);
    return false;
  }

  public boolean equals(ImageFragmentBuffers that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_extents = true && this.isSetExtents();
    boolean that_present_extents = true && that.isSetExtents();
    if (this_present_extents || that_present_extents) {
      if (!(this_present_extents && that_present_extents))
        return false;
      if (!this.extents.equals(that.extents))
        return false;
    }

    boolean this_present_pixels = true && this.isSetPixels();
    boolean that_present_pixels = true && that.isSetPixels();
    if (this_present_pixels || that_present_pixels) {
      if (!(this_present_pixels && that_present_pixels))
        return false;
      if (!this.pixels.equals(that.pixels))
        return false;
    }

    boolean this_present_depth = true && this.isSetDepth();
    boolean that_present_depth = true && that.isSetDepth();
    if (this_present_depth || that_present_depth) {
      if (!(this_present_depth && that_present_depth))
        return false;
      if (!this.depth.equals(that.depth))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetExtents()) ? 131071 : 524287);
    if (isSetExtents())
      hashCode = hashCode * 8191 + extents.hashCode();

    hashCode = hashCode * 8191 + ((isSetPixels()) ? 131071 : 524287);
    if (isSetPixels())
      hashCode = hashCode * 8191 + pixels.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepth()) ? 131071 : 524287);
    if (isSetDepth())
      hashCode = hashCode * 8191 + depth.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ImageFragmentBuffers other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetExtents()).compareTo(other.isSetExtents());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExtents()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extents, other.extents);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPixels()).compareTo(other.isSetPixels());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPixels()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pixels, other.pixels);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDepth()).compareTo(other.isSetDepth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.depth, other.depth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageFragmentBuffers(");
    boolean first = true;

    sb.append("extents:");
    if (this.extents == null) {
      sb.append("null");
    } else {
      sb.append(this.extents);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pixels:");
    if (this.pixels == null) {
      sb.append("null");
    } else {
      sb.append(this.pixels);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("depth:");
    if (this.depth == null) {
      sb.append("null");
    } else {
      sb.append(this.depth);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (extents != null) {
      extents.validate();
    }
    if (pixels != null) {
      pixels.validate();
    }
    if (depth != null) {
      depth.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageFragmentBuffersStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageFragmentBuffersStandardScheme getScheme() {
      return new ImageFragmentBuffersStandardScheme();
    }
  }

  private static class ImageFragmentBuffersStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageFragmentBuffers> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageFragmentBuffers struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXTENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.extents = new Viewport();
              struct.extents.read(iprot);
              struct.setExtentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PIXELS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.pixels = new DataBuffer();
              struct.pixels.read(iprot);
              struct.setPixelsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPTH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.depth = new DataBuffer();
              struct.depth.read(iprot);
              struct.setDepthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageFragmentBuffers struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.extents != null) {
        oprot.writeFieldBegin(EXTENTS_FIELD_DESC);
        struct.extents.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.pixels != null) {
        oprot.writeFieldBegin(PIXELS_FIELD_DESC);
        struct.pixels.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.depth != null) {
        oprot.writeFieldBegin(DEPTH_FIELD_DESC);
        struct.depth.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageFragmentBuffersTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageFragmentBuffersTupleScheme getScheme() {
      return new ImageFragmentBuffersTupleScheme();
    }
  }

  private static class ImageFragmentBuffersTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageFragmentBuffers> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageFragmentBuffers struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExtents()) {
        optionals.set(0);
      }
      if (struct.isSetPixels()) {
        optionals.set(1);
      }
      if (struct.isSetDepth()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetExtents()) {
        struct.extents.write(oprot);
      }
      if (struct.isSetPixels()) {
        struct.pixels.write(oprot);
      }
      if (struct.isSetDepth()) {
        struct.depth.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageFragmentBuffers struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.extents = new Viewport();
        struct.extents.read(iprot);
        struct.setExtentsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.pixels = new DataBuffer();
        struct.pixels.read(iprot);
        struct.setPixelsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.depth = new DataBuffer();
        struct.depth.read(iprot);
        struct.setDepthIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

