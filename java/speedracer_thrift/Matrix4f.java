/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-23")
public class Matrix4f implements org.apache.thrift.TBase<Matrix4f, Matrix4f._Fields>, java.io.Serializable, Cloneable, Comparable<Matrix4f> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Matrix4f");

  private static final org.apache.thrift.protocol.TField BASIS_X_FIELD_DESC = new org.apache.thrift.protocol.TField("basis_x", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField BASIS_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("basis_y", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField T_FIELD_DESC = new org.apache.thrift.protocol.TField("t", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField S_FIELD_DESC = new org.apache.thrift.protocol.TField("s", org.apache.thrift.protocol.TType.DOUBLE, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Matrix4fStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Matrix4fTupleSchemeFactory();

  public Vector3f basis_x; // required
  public Vector3f basis_y; // required
  public Vector3f t; // required
  public double s; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BASIS_X((short)1, "basis_x"),
    BASIS_Y((short)2, "basis_y"),
    T((short)3, "t"),
    S((short)4, "s");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BASIS_X
          return BASIS_X;
        case 2: // BASIS_Y
          return BASIS_Y;
        case 3: // T
          return T;
        case 4: // S
          return S;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __S_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BASIS_X, new org.apache.thrift.meta_data.FieldMetaData("basis_x", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector3f.class)));
    tmpMap.put(_Fields.BASIS_Y, new org.apache.thrift.meta_data.FieldMetaData("basis_y", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector3f.class)));
    tmpMap.put(_Fields.T, new org.apache.thrift.meta_data.FieldMetaData("t", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Vector3f.class)));
    tmpMap.put(_Fields.S, new org.apache.thrift.meta_data.FieldMetaData("s", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Matrix4f.class, metaDataMap);
  }

  public Matrix4f() {
  }

  public Matrix4f(
    Vector3f basis_x,
    Vector3f basis_y,
    Vector3f t,
    double s)
  {
    this();
    this.basis_x = basis_x;
    this.basis_y = basis_y;
    this.t = t;
    this.s = s;
    setSIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Matrix4f(Matrix4f other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBasis_x()) {
      this.basis_x = new Vector3f(other.basis_x);
    }
    if (other.isSetBasis_y()) {
      this.basis_y = new Vector3f(other.basis_y);
    }
    if (other.isSetT()) {
      this.t = new Vector3f(other.t);
    }
    this.s = other.s;
  }

  public Matrix4f deepCopy() {
    return new Matrix4f(this);
  }

  @Override
  public void clear() {
    this.basis_x = null;
    this.basis_y = null;
    this.t = null;
    setSIsSet(false);
    this.s = 0.0;
  }

  public Vector3f getBasis_x() {
    return this.basis_x;
  }

  public Matrix4f setBasis_x(Vector3f basis_x) {
    this.basis_x = basis_x;
    return this;
  }

  public void unsetBasis_x() {
    this.basis_x = null;
  }

  /** Returns true if field basis_x is set (has been assigned a value) and false otherwise */
  public boolean isSetBasis_x() {
    return this.basis_x != null;
  }

  public void setBasis_xIsSet(boolean value) {
    if (!value) {
      this.basis_x = null;
    }
  }

  public Vector3f getBasis_y() {
    return this.basis_y;
  }

  public Matrix4f setBasis_y(Vector3f basis_y) {
    this.basis_y = basis_y;
    return this;
  }

  public void unsetBasis_y() {
    this.basis_y = null;
  }

  /** Returns true if field basis_y is set (has been assigned a value) and false otherwise */
  public boolean isSetBasis_y() {
    return this.basis_y != null;
  }

  public void setBasis_yIsSet(boolean value) {
    if (!value) {
      this.basis_y = null;
    }
  }

  public Vector3f getT() {
    return this.t;
  }

  public Matrix4f setT(Vector3f t) {
    this.t = t;
    return this;
  }

  public void unsetT() {
    this.t = null;
  }

  /** Returns true if field t is set (has been assigned a value) and false otherwise */
  public boolean isSetT() {
    return this.t != null;
  }

  public void setTIsSet(boolean value) {
    if (!value) {
      this.t = null;
    }
  }

  public double getS() {
    return this.s;
  }

  public Matrix4f setS(double s) {
    this.s = s;
    setSIsSet(true);
    return this;
  }

  public void unsetS() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __S_ISSET_ID);
  }

  /** Returns true if field s is set (has been assigned a value) and false otherwise */
  public boolean isSetS() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __S_ISSET_ID);
  }

  public void setSIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __S_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BASIS_X:
      if (value == null) {
        unsetBasis_x();
      } else {
        setBasis_x((Vector3f)value);
      }
      break;

    case BASIS_Y:
      if (value == null) {
        unsetBasis_y();
      } else {
        setBasis_y((Vector3f)value);
      }
      break;

    case T:
      if (value == null) {
        unsetT();
      } else {
        setT((Vector3f)value);
      }
      break;

    case S:
      if (value == null) {
        unsetS();
      } else {
        setS((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BASIS_X:
      return getBasis_x();

    case BASIS_Y:
      return getBasis_y();

    case T:
      return getT();

    case S:
      return getS();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BASIS_X:
      return isSetBasis_x();
    case BASIS_Y:
      return isSetBasis_y();
    case T:
      return isSetT();
    case S:
      return isSetS();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Matrix4f)
      return this.equals((Matrix4f)that);
    return false;
  }

  public boolean equals(Matrix4f that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_basis_x = true && this.isSetBasis_x();
    boolean that_present_basis_x = true && that.isSetBasis_x();
    if (this_present_basis_x || that_present_basis_x) {
      if (!(this_present_basis_x && that_present_basis_x))
        return false;
      if (!this.basis_x.equals(that.basis_x))
        return false;
    }

    boolean this_present_basis_y = true && this.isSetBasis_y();
    boolean that_present_basis_y = true && that.isSetBasis_y();
    if (this_present_basis_y || that_present_basis_y) {
      if (!(this_present_basis_y && that_present_basis_y))
        return false;
      if (!this.basis_y.equals(that.basis_y))
        return false;
    }

    boolean this_present_t = true && this.isSetT();
    boolean that_present_t = true && that.isSetT();
    if (this_present_t || that_present_t) {
      if (!(this_present_t && that_present_t))
        return false;
      if (!this.t.equals(that.t))
        return false;
    }

    boolean this_present_s = true;
    boolean that_present_s = true;
    if (this_present_s || that_present_s) {
      if (!(this_present_s && that_present_s))
        return false;
      if (this.s != that.s)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBasis_x()) ? 131071 : 524287);
    if (isSetBasis_x())
      hashCode = hashCode * 8191 + basis_x.hashCode();

    hashCode = hashCode * 8191 + ((isSetBasis_y()) ? 131071 : 524287);
    if (isSetBasis_y())
      hashCode = hashCode * 8191 + basis_y.hashCode();

    hashCode = hashCode * 8191 + ((isSetT()) ? 131071 : 524287);
    if (isSetT())
      hashCode = hashCode * 8191 + t.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(s);

    return hashCode;
  }

  @Override
  public int compareTo(Matrix4f other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBasis_x()).compareTo(other.isSetBasis_x());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasis_x()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basis_x, other.basis_x);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBasis_y()).compareTo(other.isSetBasis_y());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBasis_y()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.basis_y, other.basis_y);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetT()).compareTo(other.isSetT());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetT()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.t, other.t);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetS()).compareTo(other.isSetS());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetS()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.s, other.s);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Matrix4f(");
    boolean first = true;

    sb.append("basis_x:");
    if (this.basis_x == null) {
      sb.append("null");
    } else {
      sb.append(this.basis_x);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("basis_y:");
    if (this.basis_y == null) {
      sb.append("null");
    } else {
      sb.append(this.basis_y);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("t:");
    if (this.t == null) {
      sb.append("null");
    } else {
      sb.append(this.t);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("s:");
    sb.append(this.s);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (basis_x != null) {
      basis_x.validate();
    }
    if (basis_y != null) {
      basis_y.validate();
    }
    if (t != null) {
      t.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Matrix4fStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Matrix4fStandardScheme getScheme() {
      return new Matrix4fStandardScheme();
    }
  }

  private static class Matrix4fStandardScheme extends org.apache.thrift.scheme.StandardScheme<Matrix4f> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Matrix4f struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BASIS_X
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.basis_x = new Vector3f();
              struct.basis_x.read(iprot);
              struct.setBasis_xIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BASIS_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.basis_y = new Vector3f();
              struct.basis_y.read(iprot);
              struct.setBasis_yIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // T
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.t = new Vector3f();
              struct.t.read(iprot);
              struct.setTIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // S
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.s = iprot.readDouble();
              struct.setSIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Matrix4f struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.basis_x != null) {
        oprot.writeFieldBegin(BASIS_X_FIELD_DESC);
        struct.basis_x.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.basis_y != null) {
        oprot.writeFieldBegin(BASIS_Y_FIELD_DESC);
        struct.basis_y.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.t != null) {
        oprot.writeFieldBegin(T_FIELD_DESC);
        struct.t.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(S_FIELD_DESC);
      oprot.writeDouble(struct.s);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Matrix4fTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Matrix4fTupleScheme getScheme() {
      return new Matrix4fTupleScheme();
    }
  }

  private static class Matrix4fTupleScheme extends org.apache.thrift.scheme.TupleScheme<Matrix4f> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Matrix4f struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBasis_x()) {
        optionals.set(0);
      }
      if (struct.isSetBasis_y()) {
        optionals.set(1);
      }
      if (struct.isSetT()) {
        optionals.set(2);
      }
      if (struct.isSetS()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetBasis_x()) {
        struct.basis_x.write(oprot);
      }
      if (struct.isSetBasis_y()) {
        struct.basis_y.write(oprot);
      }
      if (struct.isSetT()) {
        struct.t.write(oprot);
      }
      if (struct.isSetS()) {
        oprot.writeDouble(struct.s);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Matrix4f struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.basis_x = new Vector3f();
        struct.basis_x.read(iprot);
        struct.setBasis_xIsSet(true);
      }
      if (incoming.get(1)) {
        struct.basis_y = new Vector3f();
        struct.basis_y.read(iprot);
        struct.setBasis_yIsSet(true);
      }
      if (incoming.get(2)) {
        struct.t = new Vector3f();
        struct.t.read(iprot);
        struct.setTIsSet(true);
      }
      if (incoming.get(3)) {
        struct.s = iprot.readDouble();
        struct.setSIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

