/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-01-23")
public class ImageFragmentList implements org.apache.thrift.TBase<ImageFragmentList, ImageFragmentList._Fields>, java.io.Serializable, Cloneable, Comparable<ImageFragmentList> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageFragmentList");

  private static final org.apache.thrift.protocol.TField FRAME_FIELD_DESC = new org.apache.thrift.protocol.TField("frame", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField FRAGMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("fragments", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField TOTAL_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("totalCount", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField ACCUM_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("accumCount", org.apache.thrift.protocol.TType.I32, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageFragmentListStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageFragmentListTupleSchemeFactory();

  public FrameID frame; // required
  public java.util.List<ImageFragmentInfo> fragments; // required
  public int totalCount; // required
  public int accumCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FRAME((short)1, "frame"),
    FRAGMENTS((short)2, "fragments"),
    TOTAL_COUNT((short)3, "totalCount"),
    ACCUM_COUNT((short)4, "accumCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FRAME
          return FRAME;
        case 2: // FRAGMENTS
          return FRAGMENTS;
        case 3: // TOTAL_COUNT
          return TOTAL_COUNT;
        case 4: // ACCUM_COUNT
          return ACCUM_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOTALCOUNT_ISSET_ID = 0;
  private static final int __ACCUMCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FRAME, new org.apache.thrift.meta_data.FieldMetaData("frame", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FrameID.class)));
    tmpMap.put(_Fields.FRAGMENTS, new org.apache.thrift.meta_data.FieldMetaData("fragments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.LIST        , "ImageFragmentInfo_list")));
    tmpMap.put(_Fields.TOTAL_COUNT, new org.apache.thrift.meta_data.FieldMetaData("totalCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ACCUM_COUNT, new org.apache.thrift.meta_data.FieldMetaData("accumCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageFragmentList.class, metaDataMap);
  }

  public ImageFragmentList() {
    this.totalCount = 0;

    this.accumCount = 0;

  }

  public ImageFragmentList(
    FrameID frame,
    java.util.List<ImageFragmentInfo> fragments,
    int totalCount,
    int accumCount)
  {
    this();
    this.frame = frame;
    this.fragments = fragments;
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    this.accumCount = accumCount;
    setAccumCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageFragmentList(ImageFragmentList other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetFrame()) {
      this.frame = new FrameID(other.frame);
    }
    if (other.isSetFragments()) {
      java.util.List<ImageFragmentInfo> __this__fragments = new java.util.ArrayList<ImageFragmentInfo>(other.fragments.size());
      for (ImageFragmentInfo other_element : other.fragments) {
        __this__fragments.add(new ImageFragmentInfo(other_element));
      }
      this.fragments = __this__fragments;
    }
    this.totalCount = other.totalCount;
    this.accumCount = other.accumCount;
  }

  public ImageFragmentList deepCopy() {
    return new ImageFragmentList(this);
  }

  @Override
  public void clear() {
    this.frame = null;
    this.fragments = null;
    this.totalCount = 0;

    this.accumCount = 0;

  }

  public FrameID getFrame() {
    return this.frame;
  }

  public ImageFragmentList setFrame(FrameID frame) {
    this.frame = frame;
    return this;
  }

  public void unsetFrame() {
    this.frame = null;
  }

  /** Returns true if field frame is set (has been assigned a value) and false otherwise */
  public boolean isSetFrame() {
    return this.frame != null;
  }

  public void setFrameIsSet(boolean value) {
    if (!value) {
      this.frame = null;
    }
  }

  public int getFragmentsSize() {
    return (this.fragments == null) ? 0 : this.fragments.size();
  }

  public java.util.Iterator<ImageFragmentInfo> getFragmentsIterator() {
    return (this.fragments == null) ? null : this.fragments.iterator();
  }

  public void addToFragments(ImageFragmentInfo elem) {
    if (this.fragments == null) {
      this.fragments = new java.util.ArrayList<ImageFragmentInfo>();
    }
    this.fragments.add(elem);
  }

  public java.util.List<ImageFragmentInfo> getFragments() {
    return this.fragments;
  }

  public ImageFragmentList setFragments(java.util.List<ImageFragmentInfo> fragments) {
    this.fragments = fragments;
    return this;
  }

  public void unsetFragments() {
    this.fragments = null;
  }

  /** Returns true if field fragments is set (has been assigned a value) and false otherwise */
  public boolean isSetFragments() {
    return this.fragments != null;
  }

  public void setFragmentsIsSet(boolean value) {
    if (!value) {
      this.fragments = null;
    }
  }

  public int getTotalCount() {
    return this.totalCount;
  }

  public ImageFragmentList setTotalCount(int totalCount) {
    this.totalCount = totalCount;
    setTotalCountIsSet(true);
    return this;
  }

  public void unsetTotalCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  /** Returns true if field totalCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID);
  }

  public void setTotalCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOTALCOUNT_ISSET_ID, value);
  }

  public int getAccumCount() {
    return this.accumCount;
  }

  public ImageFragmentList setAccumCount(int accumCount) {
    this.accumCount = accumCount;
    setAccumCountIsSet(true);
    return this;
  }

  public void unsetAccumCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ACCUMCOUNT_ISSET_ID);
  }

  /** Returns true if field accumCount is set (has been assigned a value) and false otherwise */
  public boolean isSetAccumCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ACCUMCOUNT_ISSET_ID);
  }

  public void setAccumCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ACCUMCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case FRAME:
      if (value == null) {
        unsetFrame();
      } else {
        setFrame((FrameID)value);
      }
      break;

    case FRAGMENTS:
      if (value == null) {
        unsetFragments();
      } else {
        setFragments((java.util.List<ImageFragmentInfo>)value);
      }
      break;

    case TOTAL_COUNT:
      if (value == null) {
        unsetTotalCount();
      } else {
        setTotalCount((java.lang.Integer)value);
      }
      break;

    case ACCUM_COUNT:
      if (value == null) {
        unsetAccumCount();
      } else {
        setAccumCount((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case FRAME:
      return getFrame();

    case FRAGMENTS:
      return getFragments();

    case TOTAL_COUNT:
      return getTotalCount();

    case ACCUM_COUNT:
      return getAccumCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case FRAME:
      return isSetFrame();
    case FRAGMENTS:
      return isSetFragments();
    case TOTAL_COUNT:
      return isSetTotalCount();
    case ACCUM_COUNT:
      return isSetAccumCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageFragmentList)
      return this.equals((ImageFragmentList)that);
    return false;
  }

  public boolean equals(ImageFragmentList that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_frame = true && this.isSetFrame();
    boolean that_present_frame = true && that.isSetFrame();
    if (this_present_frame || that_present_frame) {
      if (!(this_present_frame && that_present_frame))
        return false;
      if (!this.frame.equals(that.frame))
        return false;
    }

    boolean this_present_fragments = true && this.isSetFragments();
    boolean that_present_fragments = true && that.isSetFragments();
    if (this_present_fragments || that_present_fragments) {
      if (!(this_present_fragments && that_present_fragments))
        return false;
      if (!this.fragments.equals(that.fragments))
        return false;
    }

    boolean this_present_totalCount = true;
    boolean that_present_totalCount = true;
    if (this_present_totalCount || that_present_totalCount) {
      if (!(this_present_totalCount && that_present_totalCount))
        return false;
      if (this.totalCount != that.totalCount)
        return false;
    }

    boolean this_present_accumCount = true;
    boolean that_present_accumCount = true;
    if (this_present_accumCount || that_present_accumCount) {
      if (!(this_present_accumCount && that_present_accumCount))
        return false;
      if (this.accumCount != that.accumCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetFrame()) ? 131071 : 524287);
    if (isSetFrame())
      hashCode = hashCode * 8191 + frame.hashCode();

    hashCode = hashCode * 8191 + ((isSetFragments()) ? 131071 : 524287);
    if (isSetFragments())
      hashCode = hashCode * 8191 + fragments.hashCode();

    hashCode = hashCode * 8191 + totalCount;

    hashCode = hashCode * 8191 + accumCount;

    return hashCode;
  }

  @Override
  public int compareTo(ImageFragmentList other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetFrame()).compareTo(other.isSetFrame());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFrame()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.frame, other.frame);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFragments()).compareTo(other.isSetFragments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFragments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fragments, other.fragments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTotalCount()).compareTo(other.isSetTotalCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalCount, other.totalCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAccumCount()).compareTo(other.isSetAccumCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccumCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accumCount, other.accumCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageFragmentList(");
    boolean first = true;

    sb.append("frame:");
    if (this.frame == null) {
      sb.append("null");
    } else {
      sb.append(this.frame);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fragments:");
    if (this.fragments == null) {
      sb.append("null");
    } else {
      sb.append(this.fragments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalCount:");
    sb.append(this.totalCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("accumCount:");
    sb.append(this.accumCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (frame != null) {
      frame.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageFragmentListStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageFragmentListStandardScheme getScheme() {
      return new ImageFragmentListStandardScheme();
    }
  }

  private static class ImageFragmentListStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageFragmentList> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageFragmentList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FRAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.frame = new FrameID();
              struct.frame.read(iprot);
              struct.setFrameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FRAGMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.fragments = new java.util.ArrayList<ImageFragmentInfo>(_list0.size);
                ImageFragmentInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new ImageFragmentInfo();
                  _elem1.read(iprot);
                  struct.fragments.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setFragmentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOTAL_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalCount = iprot.readI32();
              struct.setTotalCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCUM_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.accumCount = iprot.readI32();
              struct.setAccumCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageFragmentList struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.frame != null) {
        oprot.writeFieldBegin(FRAME_FIELD_DESC);
        struct.frame.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.fragments != null) {
        oprot.writeFieldBegin(FRAGMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fragments.size()));
          for (ImageFragmentInfo _iter3 : struct.fragments)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOTAL_COUNT_FIELD_DESC);
      oprot.writeI32(struct.totalCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ACCUM_COUNT_FIELD_DESC);
      oprot.writeI32(struct.accumCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageFragmentListTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageFragmentListTupleScheme getScheme() {
      return new ImageFragmentListTupleScheme();
    }
  }

  private static class ImageFragmentListTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageFragmentList> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageFragmentList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetFrame()) {
        optionals.set(0);
      }
      if (struct.isSetFragments()) {
        optionals.set(1);
      }
      if (struct.isSetTotalCount()) {
        optionals.set(2);
      }
      if (struct.isSetAccumCount()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFrame()) {
        struct.frame.write(oprot);
      }
      if (struct.isSetFragments()) {
        {
          oprot.writeI32(struct.fragments.size());
          for (ImageFragmentInfo _iter4 : struct.fragments)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetTotalCount()) {
        oprot.writeI32(struct.totalCount);
      }
      if (struct.isSetAccumCount()) {
        oprot.writeI32(struct.accumCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageFragmentList struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.frame = new FrameID();
        struct.frame.read(iprot);
        struct.setFrameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.fragments = new java.util.ArrayList<ImageFragmentInfo>(_list5.size);
          ImageFragmentInfo _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new ImageFragmentInfo();
            _elem6.read(iprot);
            struct.fragments.add(_elem6);
          }
        }
        struct.setFragmentsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.totalCount = iprot.readI32();
        struct.setTotalCountIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accumCount = iprot.readI32();
        struct.setAccumCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

