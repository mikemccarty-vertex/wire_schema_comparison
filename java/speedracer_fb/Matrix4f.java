// automatically generated by the FlatBuffers compiler, do not modify

package speedracer_fb;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Matrix4f extends Struct {
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Matrix4f __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3f basisX() { return basisX(new Vector3f()); }
  public Vector3f basisX(Vector3f obj) { return obj.__assign(bb_pos + 0, bb); }
  public Vector3f basisY() { return basisY(new Vector3f()); }
  public Vector3f basisY(Vector3f obj) { return obj.__assign(bb_pos + 12, bb); }
  public Vector3f t() { return t(new Vector3f()); }
  public Vector3f t(Vector3f obj) { return obj.__assign(bb_pos + 24, bb); }
  public float s() { return bb.getFloat(bb_pos + 36); }

  public static int createMatrix4f(FlatBufferBuilder builder, float basis_x_x, float basis_x_y, float basis_x_z, float basis_y_x, float basis_y_y, float basis_y_z, float t_x, float t_y, float t_z, float s) {
    builder.prep(4, 40);
    builder.putFloat(s);
    builder.prep(4, 12);
    builder.putFloat(t_z);
    builder.putFloat(t_y);
    builder.putFloat(t_x);
    builder.prep(4, 12);
    builder.putFloat(basis_y_z);
    builder.putFloat(basis_y_y);
    builder.putFloat(basis_y_x);
    builder.prep(4, 12);
    builder.putFloat(basis_x_z);
    builder.putFloat(basis_x_y);
    builder.putFloat(basis_x_x);
    return builder.offset();
  }
}

