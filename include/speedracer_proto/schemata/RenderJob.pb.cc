// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schemata/RenderJob.proto

#include "schemata/RenderJob.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace speedracer_proto {
class Vector3fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3f>
      _instance;
} _Vector3f_default_instance_;
class Color3fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Color3f>
      _instance;
} _Color3f_default_instance_;
class Matrix4fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Matrix4f>
      _instance;
} _Matrix4f_default_instance_;
class ViewportDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Viewport>
      _instance;
} _Viewport_default_instance_;
class BoundingBox2iDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundingBox2i>
      _instance;
} _BoundingBox2i_default_instance_;
class BoundingBox3fDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BoundingBox3f>
      _instance;
} _BoundingBox3f_default_instance_;
class DataBufferDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataBuffer>
      _instance;
} _DataBuffer_default_instance_;
class FrameIDDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FrameID>
      _instance;
} _FrameID_default_instance_;
class ImageFragmentBuffersDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageFragmentBuffers>
      _instance;
} _ImageFragmentBuffers_default_instance_;
class ImageFragmentInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageFragmentInfo>
      _instance;
} _ImageFragmentInfo_default_instance_;
class ImageFragmentListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ImageFragmentList>
      _instance;
} _ImageFragmentList_default_instance_;
}  // namespace speedracer_proto
namespace protobuf_schemata_2fRenderJob_2eproto {
void InitDefaultsVector3fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::speedracer_proto::_Vector3f_default_instance_;
    new (ptr) ::speedracer_proto::Vector3f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::Vector3f::InitAsDefaultInstance();
}

void InitDefaultsVector3f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3fImpl);
}

void InitDefaultsColor3fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::speedracer_proto::_Color3f_default_instance_;
    new (ptr) ::speedracer_proto::Color3f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::Color3f::InitAsDefaultInstance();
}

void InitDefaultsColor3f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsColor3fImpl);
}

void InitDefaultsMatrix4fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schemata_2fRenderJob_2eproto::InitDefaultsVector3f();
  {
    void* ptr = &::speedracer_proto::_Matrix4f_default_instance_;
    new (ptr) ::speedracer_proto::Matrix4f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::Matrix4f::InitAsDefaultInstance();
}

void InitDefaultsMatrix4f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMatrix4fImpl);
}

void InitDefaultsViewportImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::speedracer_proto::_Viewport_default_instance_;
    new (ptr) ::speedracer_proto::Viewport();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::Viewport::InitAsDefaultInstance();
}

void InitDefaultsViewport() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsViewportImpl);
}

void InitDefaultsBoundingBox2iImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::speedracer_proto::_BoundingBox2i_default_instance_;
    new (ptr) ::speedracer_proto::BoundingBox2i();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::BoundingBox2i::InitAsDefaultInstance();
}

void InitDefaultsBoundingBox2i() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoundingBox2iImpl);
}

void InitDefaultsBoundingBox3fImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::speedracer_proto::_BoundingBox3f_default_instance_;
    new (ptr) ::speedracer_proto::BoundingBox3f();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::BoundingBox3f::InitAsDefaultInstance();
}

void InitDefaultsBoundingBox3f() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBoundingBox3fImpl);
}

void InitDefaultsDataBufferImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::speedracer_proto::_DataBuffer_default_instance_;
    new (ptr) ::speedracer_proto::DataBuffer();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::DataBuffer::InitAsDefaultInstance();
}

void InitDefaultsDataBuffer() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDataBufferImpl);
}

void InitDefaultsFrameIDImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::speedracer_proto::_FrameID_default_instance_;
    new (ptr) ::speedracer_proto::FrameID();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::FrameID::InitAsDefaultInstance();
}

void InitDefaultsFrameID() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsFrameIDImpl);
}

void InitDefaultsImageFragmentBuffersImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schemata_2fRenderJob_2eproto::InitDefaultsViewport();
  protobuf_schemata_2fRenderJob_2eproto::InitDefaultsDataBuffer();
  {
    void* ptr = &::speedracer_proto::_ImageFragmentBuffers_default_instance_;
    new (ptr) ::speedracer_proto::ImageFragmentBuffers();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::ImageFragmentBuffers::InitAsDefaultInstance();
}

void InitDefaultsImageFragmentBuffers() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageFragmentBuffersImpl);
}

void InitDefaultsImageFragmentInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schemata_2fRenderJob_2eproto::InitDefaultsBoundingBox2i();
  {
    void* ptr = &::speedracer_proto::_ImageFragmentInfo_default_instance_;
    new (ptr) ::speedracer_proto::ImageFragmentInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::ImageFragmentInfo::InitAsDefaultInstance();
}

void InitDefaultsImageFragmentInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageFragmentInfoImpl);
}

void InitDefaultsImageFragmentListImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_schemata_2fRenderJob_2eproto::InitDefaultsFrameID();
  protobuf_schemata_2fRenderJob_2eproto::InitDefaultsImageFragmentInfo();
  {
    void* ptr = &::speedracer_proto::_ImageFragmentList_default_instance_;
    new (ptr) ::speedracer_proto::ImageFragmentList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::speedracer_proto::ImageFragmentList::InitAsDefaultInstance();
}

void InitDefaultsImageFragmentList() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsImageFragmentListImpl);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Vector3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Vector3f, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Vector3f, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Vector3f, z_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Color3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Color3f, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Color3f, g_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Color3f, b_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Matrix4f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Matrix4f, basis_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Matrix4f, basis_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Matrix4f, t_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Matrix4f, s_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Viewport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Viewport, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::Viewport, height_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox2i, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox2i, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox2i, xmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox2i, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox2i, ymax_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox3f, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox3f, xmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox3f, xmax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox3f, ymin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox3f, ymax_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox3f, zmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::BoundingBox3f, zmax_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::DataBuffer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::DataBuffer, format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::DataBuffer, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::FrameID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::FrameID, id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentBuffers, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentBuffers, extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentBuffers, pixels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentBuffers, depth_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentInfo, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentInfo, bounds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentInfo, isopaque_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentList, frame_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentList, fragments_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentList, totalcount_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::speedracer_proto::ImageFragmentList, accumcount_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::speedracer_proto::Vector3f)},
  { 8, -1, sizeof(::speedracer_proto::Color3f)},
  { 16, -1, sizeof(::speedracer_proto::Matrix4f)},
  { 25, -1, sizeof(::speedracer_proto::Viewport)},
  { 32, -1, sizeof(::speedracer_proto::BoundingBox2i)},
  { 41, -1, sizeof(::speedracer_proto::BoundingBox3f)},
  { 52, -1, sizeof(::speedracer_proto::DataBuffer)},
  { 59, -1, sizeof(::speedracer_proto::FrameID)},
  { 65, -1, sizeof(::speedracer_proto::ImageFragmentBuffers)},
  { 73, -1, sizeof(::speedracer_proto::ImageFragmentInfo)},
  { 81, -1, sizeof(::speedracer_proto::ImageFragmentList)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_Vector3f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_Color3f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_Matrix4f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_Viewport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_BoundingBox2i_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_BoundingBox3f_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_DataBuffer_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_FrameID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_ImageFragmentBuffers_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_ImageFragmentInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::speedracer_proto::_ImageFragmentList_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "schemata/RenderJob.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\030schemata/RenderJob.proto\022\020speedracer_p"
      "roto\"+\n\010Vector3f\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t"
      "\n\001z\030\003 \001(\002\"*\n\007Color3f\022\t\n\001r\030\001 \001(\002\022\t\n\001g\030\002 \001"
      "(\002\022\t\n\001b\030\003 \001(\002\"\226\001\n\010Matrix4f\022+\n\007basis_x\030\001 "
      "\001(\0132\032.speedracer_proto.Vector3f\022+\n\007basis"
      "_y\030\002 \001(\0132\032.speedracer_proto.Vector3f\022%\n\001"
      "t\030\003 \001(\0132\032.speedracer_proto.Vector3f\022\t\n\001s"
      "\030\004 \001(\002\")\n\010Viewport\022\r\n\005width\030\001 \001(\005\022\016\n\006hei"
      "ght\030\002 \001(\005\"G\n\rBoundingBox2i\022\014\n\004xmin\030\001 \001(\005"
      "\022\014\n\004xmax\030\002 \001(\005\022\014\n\004ymin\030\003 \001(\005\022\014\n\004ymax\030\004 \001"
      "(\005\"c\n\rBoundingBox3f\022\014\n\004xmin\030\001 \001(\002\022\014\n\004xma"
      "x\030\002 \001(\002\022\014\n\004ymin\030\003 \001(\002\022\014\n\004ymax\030\004 \001(\002\022\014\n\004z"
      "min\030\005 \001(\002\022\014\n\004zmax\030\006 \001(\002\"N\n\nDataBuffer\0222\n"
      "\006format\030\001 \001(\0162\".speedracer_proto.DataBuf"
      "ferFormat\022\014\n\004data\030\002 \001(\014\"\025\n\007FrameID\022\n\n\002id"
      "\030\001 \001(\t\"\236\001\n\024ImageFragmentBuffers\022+\n\007exten"
      "ts\030\001 \001(\0132\032.speedracer_proto.Viewport\022,\n\006"
      "pixels\030\002 \001(\0132\034.speedracer_proto.DataBuff"
      "er\022+\n\005depth\030\003 \001(\0132\034.speedracer_proto.Dat"
      "aBuffer\"c\n\021ImageFragmentInfo\022\013\n\003key\030\001 \001("
      "\t\022/\n\006bounds\030\002 \001(\0132\037.speedracer_proto.Bou"
      "ndingBox2i\022\020\n\010isOpaque\030\003 \001(\010\"\235\001\n\021ImageFr"
      "agmentList\022(\n\005frame\030\001 \001(\0132\031.speedracer_p"
      "roto.FrameID\0226\n\tfragments\030\002 \003(\0132#.speedr"
      "acer_proto.ImageFragmentInfo\022\022\n\ntotalCou"
      "nt\030\003 \001(\005\022\022\n\naccumCount\030\004 \001(\005*\216\001\n\020DataBuf"
      "ferFormat\022\017\n\013BUFFER_NONE\020\000\022\020\n\014BUFFER_RGB"
      "_8\020\001\022\021\n\rBUFFER_RGBA_8\020\002\022\025\n\021BUFFER_UINT_1"
      "6_LE\020\003\022\025\n\021BUFFER_UINT_16_BE\020\004\022\026\n\022BUFFER_"
      "FLOAT_32_LE\020\005B\002H\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1185);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schemata/RenderJob.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_schemata_2fRenderJob_2eproto
namespace speedracer_proto {
const ::google::protobuf::EnumDescriptor* DataBufferFormat_descriptor() {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schemata_2fRenderJob_2eproto::file_level_enum_descriptors[0];
}
bool DataBufferFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vector3f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3f::kXFieldNumber;
const int Vector3f::kYFieldNumber;
const int Vector3f::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3f::Vector3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsVector3f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.Vector3f)
}
Vector3f::Vector3f(const Vector3f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.Vector3f)
}

void Vector3f::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _cached_size_ = 0;
}

Vector3f::~Vector3f() {
  // @@protoc_insertion_point(destructor:speedracer_proto.Vector3f)
  SharedDtor();
}

void Vector3f::SharedDtor() {
}

void Vector3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3f::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3f& Vector3f::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsVector3f();
  return *internal_default_instance();
}

Vector3f* Vector3f::New(::google::protobuf::Arena* arena) const {
  Vector3f* n = new Vector3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3f::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.Vector3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear();
}

bool Vector3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.Vector3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.Vector3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.Vector3f)
  return false;
#undef DO_
}

void Vector3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.Vector3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float z = 3;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.Vector3f)
}

::google::protobuf::uint8* Vector3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.Vector3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float z = 3;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.Vector3f)
  return target;
}

size_t Vector3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.Vector3f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (this->z() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.Vector3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.Vector3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.Vector3f)
    MergeFrom(*source);
  }
}

void Vector3f::MergeFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.Vector3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
}

void Vector3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3f::CopyFrom(const Vector3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.Vector3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3f::IsInitialized() const {
  return true;
}

void Vector3f::Swap(Vector3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3f::InternalSwap(Vector3f* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3f::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Color3f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color3f::kRFieldNumber;
const int Color3f::kGFieldNumber;
const int Color3f::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color3f::Color3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsColor3f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.Color3f)
}
Color3f::Color3f(const Color3f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&r_, &from.r_,
    static_cast<size_t>(reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&r_)) + sizeof(b_));
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.Color3f)
}

void Color3f::SharedCtor() {
  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _cached_size_ = 0;
}

Color3f::~Color3f() {
  // @@protoc_insertion_point(destructor:speedracer_proto.Color3f)
  SharedDtor();
}

void Color3f::SharedDtor() {
}

void Color3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Color3f::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Color3f& Color3f::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsColor3f();
  return *internal_default_instance();
}

Color3f* Color3f::New(::google::protobuf::Arena* arena) const {
  Color3f* n = new Color3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Color3f::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.Color3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&r_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&r_)) + sizeof(b_));
  _internal_metadata_.Clear();
}

bool Color3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.Color3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float r = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &r_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float g = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &g_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float b = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.Color3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.Color3f)
  return false;
#undef DO_
}

void Color3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.Color3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (this->r() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->r(), output);
  }

  // float g = 2;
  if (this->g() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->g(), output);
  }

  // float b = 3;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->b(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.Color3f)
}

::google::protobuf::uint8* Color3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.Color3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float r = 1;
  if (this->r() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->r(), target);
  }

  // float g = 2;
  if (this->g() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->g(), target);
  }

  // float b = 3;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->b(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.Color3f)
  return target;
}

size_t Color3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.Color3f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float r = 1;
  if (this->r() != 0) {
    total_size += 1 + 4;
  }

  // float g = 2;
  if (this->g() != 0) {
    total_size += 1 + 4;
  }

  // float b = 3;
  if (this->b() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Color3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.Color3f)
  GOOGLE_DCHECK_NE(&from, this);
  const Color3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.Color3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.Color3f)
    MergeFrom(*source);
  }
}

void Color3f::MergeFrom(const Color3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.Color3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.r() != 0) {
    set_r(from.r());
  }
  if (from.g() != 0) {
    set_g(from.g());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void Color3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.Color3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color3f::CopyFrom(const Color3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.Color3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color3f::IsInitialized() const {
  return true;
}

void Color3f::Swap(Color3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color3f::InternalSwap(Color3f* other) {
  using std::swap;
  swap(r_, other->r_);
  swap(g_, other->g_);
  swap(b_, other->b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Color3f::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Matrix4f::InitAsDefaultInstance() {
  ::speedracer_proto::_Matrix4f_default_instance_._instance.get_mutable()->basis_x_ = const_cast< ::speedracer_proto::Vector3f*>(
      ::speedracer_proto::Vector3f::internal_default_instance());
  ::speedracer_proto::_Matrix4f_default_instance_._instance.get_mutable()->basis_y_ = const_cast< ::speedracer_proto::Vector3f*>(
      ::speedracer_proto::Vector3f::internal_default_instance());
  ::speedracer_proto::_Matrix4f_default_instance_._instance.get_mutable()->t_ = const_cast< ::speedracer_proto::Vector3f*>(
      ::speedracer_proto::Vector3f::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Matrix4f::kBasisXFieldNumber;
const int Matrix4f::kBasisYFieldNumber;
const int Matrix4f::kTFieldNumber;
const int Matrix4f::kSFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Matrix4f::Matrix4f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsMatrix4f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.Matrix4f)
}
Matrix4f::Matrix4f(const Matrix4f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_basis_x()) {
    basis_x_ = new ::speedracer_proto::Vector3f(*from.basis_x_);
  } else {
    basis_x_ = NULL;
  }
  if (from.has_basis_y()) {
    basis_y_ = new ::speedracer_proto::Vector3f(*from.basis_y_);
  } else {
    basis_y_ = NULL;
  }
  if (from.has_t()) {
    t_ = new ::speedracer_proto::Vector3f(*from.t_);
  } else {
    t_ = NULL;
  }
  s_ = from.s_;
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.Matrix4f)
}

void Matrix4f::SharedCtor() {
  ::memset(&basis_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&s_) -
      reinterpret_cast<char*>(&basis_x_)) + sizeof(s_));
  _cached_size_ = 0;
}

Matrix4f::~Matrix4f() {
  // @@protoc_insertion_point(destructor:speedracer_proto.Matrix4f)
  SharedDtor();
}

void Matrix4f::SharedDtor() {
  if (this != internal_default_instance()) delete basis_x_;
  if (this != internal_default_instance()) delete basis_y_;
  if (this != internal_default_instance()) delete t_;
}

void Matrix4f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Matrix4f::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Matrix4f& Matrix4f::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsMatrix4f();
  return *internal_default_instance();
}

Matrix4f* Matrix4f::New(::google::protobuf::Arena* arena) const {
  Matrix4f* n = new Matrix4f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Matrix4f::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.Matrix4f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && basis_x_ != NULL) {
    delete basis_x_;
  }
  basis_x_ = NULL;
  if (GetArenaNoVirtual() == NULL && basis_y_ != NULL) {
    delete basis_y_;
  }
  basis_y_ = NULL;
  if (GetArenaNoVirtual() == NULL && t_ != NULL) {
    delete t_;
  }
  t_ = NULL;
  s_ = 0;
  _internal_metadata_.Clear();
}

bool Matrix4f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.Matrix4f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speedracer_proto.Vector3f basis_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basis_x()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speedracer_proto.Vector3f basis_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_basis_y()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speedracer_proto.Vector3f t = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_t()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float s = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &s_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.Matrix4f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.Matrix4f)
  return false;
#undef DO_
}

void Matrix4f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.Matrix4f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.Vector3f basis_x = 1;
  if (this->has_basis_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->basis_x_, output);
  }

  // .speedracer_proto.Vector3f basis_y = 2;
  if (this->has_basis_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->basis_y_, output);
  }

  // .speedracer_proto.Vector3f t = 3;
  if (this->has_t()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->t_, output);
  }

  // float s = 4;
  if (this->s() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->s(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.Matrix4f)
}

::google::protobuf::uint8* Matrix4f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.Matrix4f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.Vector3f basis_x = 1;
  if (this->has_basis_x()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->basis_x_, deterministic, target);
  }

  // .speedracer_proto.Vector3f basis_y = 2;
  if (this->has_basis_y()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->basis_y_, deterministic, target);
  }

  // .speedracer_proto.Vector3f t = 3;
  if (this->has_t()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->t_, deterministic, target);
  }

  // float s = 4;
  if (this->s() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->s(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.Matrix4f)
  return target;
}

size_t Matrix4f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.Matrix4f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .speedracer_proto.Vector3f basis_x = 1;
  if (this->has_basis_x()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->basis_x_);
  }

  // .speedracer_proto.Vector3f basis_y = 2;
  if (this->has_basis_y()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->basis_y_);
  }

  // .speedracer_proto.Vector3f t = 3;
  if (this->has_t()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->t_);
  }

  // float s = 4;
  if (this->s() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Matrix4f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.Matrix4f)
  GOOGLE_DCHECK_NE(&from, this);
  const Matrix4f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Matrix4f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.Matrix4f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.Matrix4f)
    MergeFrom(*source);
  }
}

void Matrix4f::MergeFrom(const Matrix4f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.Matrix4f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_basis_x()) {
    mutable_basis_x()->::speedracer_proto::Vector3f::MergeFrom(from.basis_x());
  }
  if (from.has_basis_y()) {
    mutable_basis_y()->::speedracer_proto::Vector3f::MergeFrom(from.basis_y());
  }
  if (from.has_t()) {
    mutable_t()->::speedracer_proto::Vector3f::MergeFrom(from.t());
  }
  if (from.s() != 0) {
    set_s(from.s());
  }
}

void Matrix4f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.Matrix4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Matrix4f::CopyFrom(const Matrix4f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.Matrix4f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Matrix4f::IsInitialized() const {
  return true;
}

void Matrix4f::Swap(Matrix4f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Matrix4f::InternalSwap(Matrix4f* other) {
  using std::swap;
  swap(basis_x_, other->basis_x_);
  swap(basis_y_, other->basis_y_);
  swap(t_, other->t_);
  swap(s_, other->s_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Matrix4f::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Viewport::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Viewport::kWidthFieldNumber;
const int Viewport::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Viewport::Viewport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsViewport();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.Viewport)
}
Viewport::Viewport(const Viewport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.Viewport)
}

void Viewport::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _cached_size_ = 0;
}

Viewport::~Viewport() {
  // @@protoc_insertion_point(destructor:speedracer_proto.Viewport)
  SharedDtor();
}

void Viewport::SharedDtor() {
}

void Viewport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Viewport::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Viewport& Viewport::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsViewport();
  return *internal_default_instance();
}

Viewport* Viewport::New(::google::protobuf::Arena* arena) const {
  Viewport* n = new Viewport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Viewport::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
  _internal_metadata_.Clear();
}

bool Viewport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.Viewport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.Viewport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.Viewport)
  return false;
#undef DO_
}

void Viewport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.Viewport)
}

::google::protobuf::uint8* Viewport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.Viewport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width = 1;
  if (this->width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->width(), target);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->height(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.Viewport)
  return target;
}

size_t Viewport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.Viewport)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Viewport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.Viewport)
  GOOGLE_DCHECK_NE(&from, this);
  const Viewport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Viewport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.Viewport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.Viewport)
    MergeFrom(*source);
  }
}

void Viewport::MergeFrom(const Viewport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.Viewport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Viewport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.Viewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Viewport::CopyFrom(const Viewport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.Viewport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Viewport::IsInitialized() const {
  return true;
}

void Viewport::Swap(Viewport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Viewport::InternalSwap(Viewport* other) {
  using std::swap;
  swap(width_, other->width_);
  swap(height_, other->height_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Viewport::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BoundingBox2i::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox2i::kXminFieldNumber;
const int BoundingBox2i::kXmaxFieldNumber;
const int BoundingBox2i::kYminFieldNumber;
const int BoundingBox2i::kYmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox2i::BoundingBox2i()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsBoundingBox2i();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.BoundingBox2i)
}
BoundingBox2i::BoundingBox2i(const BoundingBox2i& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&ymax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.BoundingBox2i)
}

void BoundingBox2i::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  _cached_size_ = 0;
}

BoundingBox2i::~BoundingBox2i() {
  // @@protoc_insertion_point(destructor:speedracer_proto.BoundingBox2i)
  SharedDtor();
}

void BoundingBox2i::SharedDtor() {
}

void BoundingBox2i::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox2i::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundingBox2i& BoundingBox2i::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsBoundingBox2i();
  return *internal_default_instance();
}

BoundingBox2i* BoundingBox2i::New(::google::protobuf::Arena* arena) const {
  BoundingBox2i* n = new BoundingBox2i;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundingBox2i::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.BoundingBox2i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ymax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(ymax_));
  _internal_metadata_.Clear();
}

bool BoundingBox2i::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.BoundingBox2i)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 xmax = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ymin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ymax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.BoundingBox2i)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.BoundingBox2i)
  return false;
#undef DO_
}

void BoundingBox2i::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.BoundingBox2i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xmin = 1;
  if (this->xmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xmin(), output);
  }

  // int32 xmax = 2;
  if (this->xmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xmax(), output);
  }

  // int32 ymin = 3;
  if (this->ymin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ymin(), output);
  }

  // int32 ymax = 4;
  if (this->ymax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ymax(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.BoundingBox2i)
}

::google::protobuf::uint8* BoundingBox2i::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.BoundingBox2i)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 xmin = 1;
  if (this->xmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xmin(), target);
  }

  // int32 xmax = 2;
  if (this->xmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xmax(), target);
  }

  // int32 ymin = 3;
  if (this->ymin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ymin(), target);
  }

  // int32 ymax = 4;
  if (this->ymax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ymax(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.BoundingBox2i)
  return target;
}

size_t BoundingBox2i::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.BoundingBox2i)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 xmin = 1;
  if (this->xmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xmin());
  }

  // int32 xmax = 2;
  if (this->xmax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->xmax());
  }

  // int32 ymin = 3;
  if (this->ymin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ymin());
  }

  // int32 ymax = 4;
  if (this->ymax() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ymax());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox2i::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.BoundingBox2i)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox2i* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundingBox2i>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.BoundingBox2i)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.BoundingBox2i)
    MergeFrom(*source);
  }
}

void BoundingBox2i::MergeFrom(const BoundingBox2i& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.BoundingBox2i)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xmin() != 0) {
    set_xmin(from.xmin());
  }
  if (from.xmax() != 0) {
    set_xmax(from.xmax());
  }
  if (from.ymin() != 0) {
    set_ymin(from.ymin());
  }
  if (from.ymax() != 0) {
    set_ymax(from.ymax());
  }
}

void BoundingBox2i::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.BoundingBox2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox2i::CopyFrom(const BoundingBox2i& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.BoundingBox2i)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox2i::IsInitialized() const {
  return true;
}

void BoundingBox2i::Swap(BoundingBox2i* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundingBox2i::InternalSwap(BoundingBox2i* other) {
  using std::swap;
  swap(xmin_, other->xmin_);
  swap(xmax_, other->xmax_);
  swap(ymin_, other->ymin_);
  swap(ymax_, other->ymax_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundingBox2i::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BoundingBox3f::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BoundingBox3f::kXminFieldNumber;
const int BoundingBox3f::kXmaxFieldNumber;
const int BoundingBox3f::kYminFieldNumber;
const int BoundingBox3f::kYmaxFieldNumber;
const int BoundingBox3f::kZminFieldNumber;
const int BoundingBox3f::kZmaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BoundingBox3f::BoundingBox3f()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsBoundingBox3f();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.BoundingBox3f)
}
BoundingBox3f::BoundingBox3f(const BoundingBox3f& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&xmin_, &from.xmin_,
    static_cast<size_t>(reinterpret_cast<char*>(&zmax_) -
    reinterpret_cast<char*>(&xmin_)) + sizeof(zmax_));
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.BoundingBox3f)
}

void BoundingBox3f::SharedCtor() {
  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(zmax_));
  _cached_size_ = 0;
}

BoundingBox3f::~BoundingBox3f() {
  // @@protoc_insertion_point(destructor:speedracer_proto.BoundingBox3f)
  SharedDtor();
}

void BoundingBox3f::SharedDtor() {
}

void BoundingBox3f::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundingBox3f::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BoundingBox3f& BoundingBox3f::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsBoundingBox3f();
  return *internal_default_instance();
}

BoundingBox3f* BoundingBox3f::New(::google::protobuf::Arena* arena) const {
  BoundingBox3f* n = new BoundingBox3f;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BoundingBox3f::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.BoundingBox3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&xmin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zmax_) -
      reinterpret_cast<char*>(&xmin_)) + sizeof(zmax_));
  _internal_metadata_.Clear();
}

bool BoundingBox3f::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.BoundingBox3f)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float xmin = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float xmax = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &xmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ymin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float ymax = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ymax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float zmin = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float zmax = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &zmax_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.BoundingBox3f)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.BoundingBox3f)
  return false;
#undef DO_
}

void BoundingBox3f::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.BoundingBox3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float xmin = 1;
  if (this->xmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->xmin(), output);
  }

  // float xmax = 2;
  if (this->xmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->xmax(), output);
  }

  // float ymin = 3;
  if (this->ymin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ymin(), output);
  }

  // float ymax = 4;
  if (this->ymax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->ymax(), output);
  }

  // float zmin = 5;
  if (this->zmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->zmin(), output);
  }

  // float zmax = 6;
  if (this->zmax() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->zmax(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.BoundingBox3f)
}

::google::protobuf::uint8* BoundingBox3f::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.BoundingBox3f)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float xmin = 1;
  if (this->xmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->xmin(), target);
  }

  // float xmax = 2;
  if (this->xmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->xmax(), target);
  }

  // float ymin = 3;
  if (this->ymin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->ymin(), target);
  }

  // float ymax = 4;
  if (this->ymax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->ymax(), target);
  }

  // float zmin = 5;
  if (this->zmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->zmin(), target);
  }

  // float zmax = 6;
  if (this->zmax() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->zmax(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.BoundingBox3f)
  return target;
}

size_t BoundingBox3f::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.BoundingBox3f)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float xmin = 1;
  if (this->xmin() != 0) {
    total_size += 1 + 4;
  }

  // float xmax = 2;
  if (this->xmax() != 0) {
    total_size += 1 + 4;
  }

  // float ymin = 3;
  if (this->ymin() != 0) {
    total_size += 1 + 4;
  }

  // float ymax = 4;
  if (this->ymax() != 0) {
    total_size += 1 + 4;
  }

  // float zmin = 5;
  if (this->zmin() != 0) {
    total_size += 1 + 4;
  }

  // float zmax = 6;
  if (this->zmax() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundingBox3f::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.BoundingBox3f)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox3f* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BoundingBox3f>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.BoundingBox3f)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.BoundingBox3f)
    MergeFrom(*source);
  }
}

void BoundingBox3f::MergeFrom(const BoundingBox3f& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.BoundingBox3f)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.xmin() != 0) {
    set_xmin(from.xmin());
  }
  if (from.xmax() != 0) {
    set_xmax(from.xmax());
  }
  if (from.ymin() != 0) {
    set_ymin(from.ymin());
  }
  if (from.ymax() != 0) {
    set_ymax(from.ymax());
  }
  if (from.zmin() != 0) {
    set_zmin(from.zmin());
  }
  if (from.zmax() != 0) {
    set_zmax(from.zmax());
  }
}

void BoundingBox3f::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.BoundingBox3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox3f::CopyFrom(const BoundingBox3f& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.BoundingBox3f)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox3f::IsInitialized() const {
  return true;
}

void BoundingBox3f::Swap(BoundingBox3f* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BoundingBox3f::InternalSwap(BoundingBox3f* other) {
  using std::swap;
  swap(xmin_, other->xmin_);
  swap(xmax_, other->xmax_);
  swap(ymin_, other->ymin_);
  swap(ymax_, other->ymax_);
  swap(zmin_, other->zmin_);
  swap(zmax_, other->zmax_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BoundingBox3f::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataBuffer::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataBuffer::kFormatFieldNumber;
const int DataBuffer::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataBuffer::DataBuffer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsDataBuffer();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.DataBuffer)
}
DataBuffer::DataBuffer(const DataBuffer& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  format_ = from.format_;
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.DataBuffer)
}

void DataBuffer::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
  _cached_size_ = 0;
}

DataBuffer::~DataBuffer() {
  // @@protoc_insertion_point(destructor:speedracer_proto.DataBuffer)
  SharedDtor();
}

void DataBuffer::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DataBuffer::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataBuffer& DataBuffer::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsDataBuffer();
  return *internal_default_instance();
}

DataBuffer* DataBuffer::New(::google::protobuf::Arena* arena) const {
  DataBuffer* n = new DataBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DataBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.DataBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  format_ = 0;
  _internal_metadata_.Clear();
}

bool DataBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.DataBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speedracer_proto.DataBufferFormat format = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_format(static_cast< ::speedracer_proto::DataBufferFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.DataBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.DataBuffer)
  return false;
#undef DO_
}

void DataBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.DataBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.DataBufferFormat format = 1;
  if (this->format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->format(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.DataBuffer)
}

::google::protobuf::uint8* DataBuffer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.DataBuffer)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.DataBufferFormat format = 1;
  if (this->format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->format(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.DataBuffer)
  return target;
}

size_t DataBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.DataBuffer)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .speedracer_proto.DataBufferFormat format = 1;
  if (this->format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->format());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DataBuffer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.DataBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  const DataBuffer* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataBuffer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.DataBuffer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.DataBuffer)
    MergeFrom(*source);
  }
}

void DataBuffer::MergeFrom(const DataBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.DataBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.format() != 0) {
    set_format(from.format());
  }
}

void DataBuffer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.DataBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataBuffer::CopyFrom(const DataBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.DataBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataBuffer::IsInitialized() const {
  return true;
}

void DataBuffer::Swap(DataBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataBuffer::InternalSwap(DataBuffer* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(format_, other->format_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DataBuffer::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FrameID::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrameID::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrameID::FrameID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsFrameID();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.FrameID)
}
FrameID::FrameID(const FrameID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.FrameID)
}

void FrameID::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FrameID::~FrameID() {
  // @@protoc_insertion_point(destructor:speedracer_proto.FrameID)
  SharedDtor();
}

void FrameID::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FrameID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FrameID::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FrameID& FrameID::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsFrameID();
  return *internal_default_instance();
}

FrameID* FrameID::New(::google::protobuf::Arena* arena) const {
  FrameID* n = new FrameID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrameID::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FrameID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.FrameID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speedracer_proto.FrameID.id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.FrameID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.FrameID)
  return false;
#undef DO_
}

void FrameID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speedracer_proto.FrameID.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.FrameID)
}

::google::protobuf::uint8* FrameID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.FrameID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speedracer_proto.FrameID.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.FrameID)
  return target;
}

size_t FrameID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.FrameID)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrameID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  const FrameID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FrameID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.FrameID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.FrameID)
    MergeFrom(*source);
  }
}

void FrameID::MergeFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.FrameID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void FrameID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FrameID::CopyFrom(const FrameID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.FrameID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrameID::IsInitialized() const {
  return true;
}

void FrameID::Swap(FrameID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrameID::InternalSwap(FrameID* other) {
  using std::swap;
  id_.Swap(&other->id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FrameID::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageFragmentBuffers::InitAsDefaultInstance() {
  ::speedracer_proto::_ImageFragmentBuffers_default_instance_._instance.get_mutable()->extents_ = const_cast< ::speedracer_proto::Viewport*>(
      ::speedracer_proto::Viewport::internal_default_instance());
  ::speedracer_proto::_ImageFragmentBuffers_default_instance_._instance.get_mutable()->pixels_ = const_cast< ::speedracer_proto::DataBuffer*>(
      ::speedracer_proto::DataBuffer::internal_default_instance());
  ::speedracer_proto::_ImageFragmentBuffers_default_instance_._instance.get_mutable()->depth_ = const_cast< ::speedracer_proto::DataBuffer*>(
      ::speedracer_proto::DataBuffer::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageFragmentBuffers::kExtentsFieldNumber;
const int ImageFragmentBuffers::kPixelsFieldNumber;
const int ImageFragmentBuffers::kDepthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageFragmentBuffers::ImageFragmentBuffers()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsImageFragmentBuffers();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.ImageFragmentBuffers)
}
ImageFragmentBuffers::ImageFragmentBuffers(const ImageFragmentBuffers& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_extents()) {
    extents_ = new ::speedracer_proto::Viewport(*from.extents_);
  } else {
    extents_ = NULL;
  }
  if (from.has_pixels()) {
    pixels_ = new ::speedracer_proto::DataBuffer(*from.pixels_);
  } else {
    pixels_ = NULL;
  }
  if (from.has_depth()) {
    depth_ = new ::speedracer_proto::DataBuffer(*from.depth_);
  } else {
    depth_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.ImageFragmentBuffers)
}

void ImageFragmentBuffers::SharedCtor() {
  ::memset(&extents_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&extents_)) + sizeof(depth_));
  _cached_size_ = 0;
}

ImageFragmentBuffers::~ImageFragmentBuffers() {
  // @@protoc_insertion_point(destructor:speedracer_proto.ImageFragmentBuffers)
  SharedDtor();
}

void ImageFragmentBuffers::SharedDtor() {
  if (this != internal_default_instance()) delete extents_;
  if (this != internal_default_instance()) delete pixels_;
  if (this != internal_default_instance()) delete depth_;
}

void ImageFragmentBuffers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageFragmentBuffers::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageFragmentBuffers& ImageFragmentBuffers::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsImageFragmentBuffers();
  return *internal_default_instance();
}

ImageFragmentBuffers* ImageFragmentBuffers::New(::google::protobuf::Arena* arena) const {
  ImageFragmentBuffers* n = new ImageFragmentBuffers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageFragmentBuffers::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.ImageFragmentBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && extents_ != NULL) {
    delete extents_;
  }
  extents_ = NULL;
  if (GetArenaNoVirtual() == NULL && pixels_ != NULL) {
    delete pixels_;
  }
  pixels_ = NULL;
  if (GetArenaNoVirtual() == NULL && depth_ != NULL) {
    delete depth_;
  }
  depth_ = NULL;
  _internal_metadata_.Clear();
}

bool ImageFragmentBuffers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.ImageFragmentBuffers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speedracer_proto.Viewport extents = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_extents()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speedracer_proto.DataBuffer pixels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pixels()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speedracer_proto.DataBuffer depth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_depth()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.ImageFragmentBuffers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.ImageFragmentBuffers)
  return false;
#undef DO_
}

void ImageFragmentBuffers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.ImageFragmentBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.Viewport extents = 1;
  if (this->has_extents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->extents_, output);
  }

  // .speedracer_proto.DataBuffer pixels = 2;
  if (this->has_pixels()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->pixels_, output);
  }

  // .speedracer_proto.DataBuffer depth = 3;
  if (this->has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->depth_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.ImageFragmentBuffers)
}

::google::protobuf::uint8* ImageFragmentBuffers::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.ImageFragmentBuffers)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.Viewport extents = 1;
  if (this->has_extents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->extents_, deterministic, target);
  }

  // .speedracer_proto.DataBuffer pixels = 2;
  if (this->has_pixels()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->pixels_, deterministic, target);
  }

  // .speedracer_proto.DataBuffer depth = 3;
  if (this->has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->depth_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.ImageFragmentBuffers)
  return target;
}

size_t ImageFragmentBuffers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.ImageFragmentBuffers)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .speedracer_proto.Viewport extents = 1;
  if (this->has_extents()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->extents_);
  }

  // .speedracer_proto.DataBuffer pixels = 2;
  if (this->has_pixels()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pixels_);
  }

  // .speedracer_proto.DataBuffer depth = 3;
  if (this->has_depth()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->depth_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageFragmentBuffers::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.ImageFragmentBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFragmentBuffers* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageFragmentBuffers>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.ImageFragmentBuffers)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.ImageFragmentBuffers)
    MergeFrom(*source);
  }
}

void ImageFragmentBuffers::MergeFrom(const ImageFragmentBuffers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.ImageFragmentBuffers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_extents()) {
    mutable_extents()->::speedracer_proto::Viewport::MergeFrom(from.extents());
  }
  if (from.has_pixels()) {
    mutable_pixels()->::speedracer_proto::DataBuffer::MergeFrom(from.pixels());
  }
  if (from.has_depth()) {
    mutable_depth()->::speedracer_proto::DataBuffer::MergeFrom(from.depth());
  }
}

void ImageFragmentBuffers::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.ImageFragmentBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFragmentBuffers::CopyFrom(const ImageFragmentBuffers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.ImageFragmentBuffers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFragmentBuffers::IsInitialized() const {
  return true;
}

void ImageFragmentBuffers::Swap(ImageFragmentBuffers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageFragmentBuffers::InternalSwap(ImageFragmentBuffers* other) {
  using std::swap;
  swap(extents_, other->extents_);
  swap(pixels_, other->pixels_);
  swap(depth_, other->depth_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageFragmentBuffers::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageFragmentInfo::InitAsDefaultInstance() {
  ::speedracer_proto::_ImageFragmentInfo_default_instance_._instance.get_mutable()->bounds_ = const_cast< ::speedracer_proto::BoundingBox2i*>(
      ::speedracer_proto::BoundingBox2i::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageFragmentInfo::kKeyFieldNumber;
const int ImageFragmentInfo::kBoundsFieldNumber;
const int ImageFragmentInfo::kIsOpaqueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageFragmentInfo::ImageFragmentInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsImageFragmentInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.ImageFragmentInfo)
}
ImageFragmentInfo::ImageFragmentInfo(const ImageFragmentInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_bounds()) {
    bounds_ = new ::speedracer_proto::BoundingBox2i(*from.bounds_);
  } else {
    bounds_ = NULL;
  }
  isopaque_ = from.isopaque_;
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.ImageFragmentInfo)
}

void ImageFragmentInfo::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&bounds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isopaque_) -
      reinterpret_cast<char*>(&bounds_)) + sizeof(isopaque_));
  _cached_size_ = 0;
}

ImageFragmentInfo::~ImageFragmentInfo() {
  // @@protoc_insertion_point(destructor:speedracer_proto.ImageFragmentInfo)
  SharedDtor();
}

void ImageFragmentInfo::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete bounds_;
}

void ImageFragmentInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageFragmentInfo::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageFragmentInfo& ImageFragmentInfo::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsImageFragmentInfo();
  return *internal_default_instance();
}

ImageFragmentInfo* ImageFragmentInfo::New(::google::protobuf::Arena* arena) const {
  ImageFragmentInfo* n = new ImageFragmentInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageFragmentInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.ImageFragmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && bounds_ != NULL) {
    delete bounds_;
  }
  bounds_ = NULL;
  isopaque_ = false;
  _internal_metadata_.Clear();
}

bool ImageFragmentInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.ImageFragmentInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "speedracer_proto.ImageFragmentInfo.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .speedracer_proto.BoundingBox2i bounds = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_bounds()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool isOpaque = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isopaque_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.ImageFragmentInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.ImageFragmentInfo)
  return false;
#undef DO_
}

void ImageFragmentInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.ImageFragmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speedracer_proto.ImageFragmentInfo.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // .speedracer_proto.BoundingBox2i bounds = 2;
  if (this->has_bounds()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->bounds_, output);
  }

  // bool isOpaque = 3;
  if (this->isopaque() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isopaque(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.ImageFragmentInfo)
}

::google::protobuf::uint8* ImageFragmentInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.ImageFragmentInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "speedracer_proto.ImageFragmentInfo.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // .speedracer_proto.BoundingBox2i bounds = 2;
  if (this->has_bounds()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->bounds_, deterministic, target);
  }

  // bool isOpaque = 3;
  if (this->isopaque() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isopaque(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.ImageFragmentInfo)
  return target;
}

size_t ImageFragmentInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.ImageFragmentInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // .speedracer_proto.BoundingBox2i bounds = 2;
  if (this->has_bounds()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->bounds_);
  }

  // bool isOpaque = 3;
  if (this->isopaque() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageFragmentInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.ImageFragmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFragmentInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageFragmentInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.ImageFragmentInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.ImageFragmentInfo)
    MergeFrom(*source);
  }
}

void ImageFragmentInfo::MergeFrom(const ImageFragmentInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.ImageFragmentInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.has_bounds()) {
    mutable_bounds()->::speedracer_proto::BoundingBox2i::MergeFrom(from.bounds());
  }
  if (from.isopaque() != 0) {
    set_isopaque(from.isopaque());
  }
}

void ImageFragmentInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.ImageFragmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFragmentInfo::CopyFrom(const ImageFragmentInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.ImageFragmentInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFragmentInfo::IsInitialized() const {
  return true;
}

void ImageFragmentInfo::Swap(ImageFragmentInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageFragmentInfo::InternalSwap(ImageFragmentInfo* other) {
  using std::swap;
  key_.Swap(&other->key_);
  swap(bounds_, other->bounds_);
  swap(isopaque_, other->isopaque_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageFragmentInfo::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ImageFragmentList::InitAsDefaultInstance() {
  ::speedracer_proto::_ImageFragmentList_default_instance_._instance.get_mutable()->frame_ = const_cast< ::speedracer_proto::FrameID*>(
      ::speedracer_proto::FrameID::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ImageFragmentList::kFrameFieldNumber;
const int ImageFragmentList::kFragmentsFieldNumber;
const int ImageFragmentList::kTotalCountFieldNumber;
const int ImageFragmentList::kAccumCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ImageFragmentList::ImageFragmentList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsImageFragmentList();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:speedracer_proto.ImageFragmentList)
}
ImageFragmentList::ImageFragmentList(const ImageFragmentList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fragments_(from.fragments_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frame()) {
    frame_ = new ::speedracer_proto::FrameID(*from.frame_);
  } else {
    frame_ = NULL;
  }
  ::memcpy(&totalcount_, &from.totalcount_,
    static_cast<size_t>(reinterpret_cast<char*>(&accumcount_) -
    reinterpret_cast<char*>(&totalcount_)) + sizeof(accumcount_));
  // @@protoc_insertion_point(copy_constructor:speedracer_proto.ImageFragmentList)
}

void ImageFragmentList::SharedCtor() {
  ::memset(&frame_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accumcount_) -
      reinterpret_cast<char*>(&frame_)) + sizeof(accumcount_));
  _cached_size_ = 0;
}

ImageFragmentList::~ImageFragmentList() {
  // @@protoc_insertion_point(destructor:speedracer_proto.ImageFragmentList)
  SharedDtor();
}

void ImageFragmentList::SharedDtor() {
  if (this != internal_default_instance()) delete frame_;
}

void ImageFragmentList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ImageFragmentList::descriptor() {
  ::protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ImageFragmentList& ImageFragmentList::default_instance() {
  ::protobuf_schemata_2fRenderJob_2eproto::InitDefaultsImageFragmentList();
  return *internal_default_instance();
}

ImageFragmentList* ImageFragmentList::New(::google::protobuf::Arena* arena) const {
  ImageFragmentList* n = new ImageFragmentList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ImageFragmentList::Clear() {
// @@protoc_insertion_point(message_clear_start:speedracer_proto.ImageFragmentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fragments_.Clear();
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) {
    delete frame_;
  }
  frame_ = NULL;
  ::memset(&totalcount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&accumcount_) -
      reinterpret_cast<char*>(&totalcount_)) + sizeof(accumcount_));
  _internal_metadata_.Clear();
}

bool ImageFragmentList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:speedracer_proto.ImageFragmentList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .speedracer_proto.FrameID frame = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .speedracer_proto.ImageFragmentInfo fragments = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_fragments()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 totalCount = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 accumCount = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accumcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:speedracer_proto.ImageFragmentList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:speedracer_proto.ImageFragmentList)
  return false;
#undef DO_
}

void ImageFragmentList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:speedracer_proto.ImageFragmentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.FrameID frame = 1;
  if (this->has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->frame_, output);
  }

  // repeated .speedracer_proto.ImageFragmentInfo fragments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->fragments(static_cast<int>(i)), output);
  }

  // int32 totalCount = 3;
  if (this->totalcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalcount(), output);
  }

  // int32 accumCount = 4;
  if (this->accumcount() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->accumcount(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:speedracer_proto.ImageFragmentList)
}

::google::protobuf::uint8* ImageFragmentList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:speedracer_proto.ImageFragmentList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .speedracer_proto.FrameID frame = 1;
  if (this->has_frame()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->frame_, deterministic, target);
  }

  // repeated .speedracer_proto.ImageFragmentInfo fragments = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fragments_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->fragments(static_cast<int>(i)), deterministic, target);
  }

  // int32 totalCount = 3;
  if (this->totalcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalcount(), target);
  }

  // int32 accumCount = 4;
  if (this->accumcount() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->accumcount(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:speedracer_proto.ImageFragmentList)
  return target;
}

size_t ImageFragmentList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:speedracer_proto.ImageFragmentList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .speedracer_proto.ImageFragmentInfo fragments = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->fragments_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fragments(static_cast<int>(i)));
    }
  }

  // .speedracer_proto.FrameID frame = 1;
  if (this->has_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->frame_);
  }

  // int32 totalCount = 3;
  if (this->totalcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->totalcount());
  }

  // int32 accumCount = 4;
  if (this->accumcount() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->accumcount());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ImageFragmentList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:speedracer_proto.ImageFragmentList)
  GOOGLE_DCHECK_NE(&from, this);
  const ImageFragmentList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ImageFragmentList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:speedracer_proto.ImageFragmentList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:speedracer_proto.ImageFragmentList)
    MergeFrom(*source);
  }
}

void ImageFragmentList::MergeFrom(const ImageFragmentList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:speedracer_proto.ImageFragmentList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fragments_.MergeFrom(from.fragments_);
  if (from.has_frame()) {
    mutable_frame()->::speedracer_proto::FrameID::MergeFrom(from.frame());
  }
  if (from.totalcount() != 0) {
    set_totalcount(from.totalcount());
  }
  if (from.accumcount() != 0) {
    set_accumcount(from.accumcount());
  }
}

void ImageFragmentList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:speedracer_proto.ImageFragmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ImageFragmentList::CopyFrom(const ImageFragmentList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:speedracer_proto.ImageFragmentList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImageFragmentList::IsInitialized() const {
  return true;
}

void ImageFragmentList::Swap(ImageFragmentList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ImageFragmentList::InternalSwap(ImageFragmentList* other) {
  using std::swap;
  fragments_.InternalSwap(&other->fragments_);
  swap(frame_, other->frame_);
  swap(totalcount_, other->totalcount_);
  swap(accumcount_, other->accumcount_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ImageFragmentList::GetMetadata() const {
  protobuf_schemata_2fRenderJob_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schemata_2fRenderJob_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace speedracer_proto

// @@protoc_insertion_point(global_scope)
