/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RenderJob_TYPES_H
#define RenderJob_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace speedracer_thrift {

enum DataBufferFormat {
  BUFFER_NONE = 0,
  BUFFER_RGB_8 = 1,
  BUFFER_RGBA_8 = 2,
  BUFFER_UINT_16_LE = 3,
  BUFFER_UINT_16_BE = 4,
  BUFFER_FLOAT_32_LE = 5
};

extern const std::map<int, const char*> _DataBufferFormat_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const DataBufferFormat val);

typedef std::vector<class ImageFragmentInfo>  ImageFragmentInfo_list;

class Vector3f;

class Color3f;

class Matrix4f;

class Viewport;

class BoundingBox2i;

class BoundingBox3f;

class DataBuffer;

class FrameID;

class ImageFragmentBuffers;

class ImageFragmentInfo;

class ImageFragmentList;

typedef struct _Vector3f__isset {
  _Vector3f__isset() : x(true), y(true), z(true) {}
  bool x :1;
  bool y :1;
  bool z :1;
} _Vector3f__isset;

class Vector3f : public virtual ::apache::thrift::TBase {
 public:

  Vector3f(const Vector3f&);
  Vector3f(Vector3f&&);
  Vector3f& operator=(const Vector3f&);
  Vector3f& operator=(Vector3f&&);
  Vector3f() : x(0), y(0), z(0) {
  }

  virtual ~Vector3f() throw();
  double x;
  double y;
  double z;

  _Vector3f__isset __isset;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_z(const double val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Vector3f &a, Vector3f &b);

std::ostream& operator<<(std::ostream& out, const Vector3f& obj);

typedef struct _Color3f__isset {
  _Color3f__isset() : r(true), g(true), b(true) {}
  bool r :1;
  bool g :1;
  bool b :1;
} _Color3f__isset;

class Color3f : public virtual ::apache::thrift::TBase {
 public:

  Color3f(const Color3f&);
  Color3f(Color3f&&);
  Color3f& operator=(const Color3f&);
  Color3f& operator=(Color3f&&);
  Color3f() : r(0), g(0), b(0) {
  }

  virtual ~Color3f() throw();
  double r;
  double g;
  double b;

  _Color3f__isset __isset;

  void __set_r(const double val);

  void __set_g(const double val);

  void __set_b(const double val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Color3f &a, Color3f &b);

std::ostream& operator<<(std::ostream& out, const Color3f& obj);

typedef struct _Matrix4f__isset {
  _Matrix4f__isset() : basis_x(false), basis_y(false), t(false), s(false) {}
  bool basis_x :1;
  bool basis_y :1;
  bool t :1;
  bool s :1;
} _Matrix4f__isset;

class Matrix4f : public virtual ::apache::thrift::TBase {
 public:

  Matrix4f(const Matrix4f&);
  Matrix4f(Matrix4f&&);
  Matrix4f& operator=(const Matrix4f&);
  Matrix4f& operator=(Matrix4f&&);
  Matrix4f() : s(0) {
  }

  virtual ~Matrix4f() throw();
  Vector3f basis_x;
  Vector3f basis_y;
  Vector3f t;
  double s;

  _Matrix4f__isset __isset;

  void __set_basis_x(const Vector3f& val);

  void __set_basis_y(const Vector3f& val);

  void __set_t(const Vector3f& val);

  void __set_s(const double val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Matrix4f &a, Matrix4f &b);

std::ostream& operator<<(std::ostream& out, const Matrix4f& obj);

typedef struct _Viewport__isset {
  _Viewport__isset() : width(true), height(true) {}
  bool width :1;
  bool height :1;
} _Viewport__isset;

class Viewport : public virtual ::apache::thrift::TBase {
 public:

  Viewport(const Viewport&);
  Viewport(Viewport&&);
  Viewport& operator=(const Viewport&);
  Viewport& operator=(Viewport&&);
  Viewport() : width(0), height(0) {
  }

  virtual ~Viewport() throw();
  int32_t width;
  int32_t height;

  _Viewport__isset __isset;

  void __set_width(const int32_t val);

  void __set_height(const int32_t val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(Viewport &a, Viewport &b);

std::ostream& operator<<(std::ostream& out, const Viewport& obj);

typedef struct _BoundingBox2i__isset {
  _BoundingBox2i__isset() : xmin(true), xmax(true), ymin(true), ymax(true) {}
  bool xmin :1;
  bool xmax :1;
  bool ymin :1;
  bool ymax :1;
} _BoundingBox2i__isset;

class BoundingBox2i : public virtual ::apache::thrift::TBase {
 public:

  BoundingBox2i(const BoundingBox2i&);
  BoundingBox2i(BoundingBox2i&&);
  BoundingBox2i& operator=(const BoundingBox2i&);
  BoundingBox2i& operator=(BoundingBox2i&&);
  BoundingBox2i() : xmin(2147483647), xmax(-2147483648), ymin(2147483647), ymax(-2147483648) {
  }

  virtual ~BoundingBox2i() throw();
  int32_t xmin;
  int32_t xmax;
  int32_t ymin;
  int32_t ymax;

  _BoundingBox2i__isset __isset;

  void __set_xmin(const int32_t val);

  void __set_xmax(const int32_t val);

  void __set_ymin(const int32_t val);

  void __set_ymax(const int32_t val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BoundingBox2i &a, BoundingBox2i &b);

std::ostream& operator<<(std::ostream& out, const BoundingBox2i& obj);

typedef struct _BoundingBox3f__isset {
  _BoundingBox3f__isset() : xmin(true), xmax(true), ymin(true), ymax(true), zmin(true), zmax(true) {}
  bool xmin :1;
  bool xmax :1;
  bool ymin :1;
  bool ymax :1;
  bool zmin :1;
  bool zmax :1;
} _BoundingBox3f__isset;

class BoundingBox3f : public virtual ::apache::thrift::TBase {
 public:

  BoundingBox3f(const BoundingBox3f&);
  BoundingBox3f(BoundingBox3f&&);
  BoundingBox3f& operator=(const BoundingBox3f&);
  BoundingBox3f& operator=(BoundingBox3f&&);
  BoundingBox3f() : xmin(1e+38), xmax(-1e+38), ymin(1e+38), ymax(-1e+38), zmin(1e+38), zmax(-1e+38) {
  }

  virtual ~BoundingBox3f() throw();
  double xmin;
  double xmax;
  double ymin;
  double ymax;
  double zmin;
  double zmax;

  _BoundingBox3f__isset __isset;

  void __set_xmin(const double val);

  void __set_xmax(const double val);

  void __set_ymin(const double val);

  void __set_ymax(const double val);

  void __set_zmin(const double val);

  void __set_zmax(const double val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(BoundingBox3f &a, BoundingBox3f &b);

std::ostream& operator<<(std::ostream& out, const BoundingBox3f& obj);

typedef struct _DataBuffer__isset {
  _DataBuffer__isset() : format(true), data(false) {}
  bool format :1;
  bool data :1;
} _DataBuffer__isset;

class DataBuffer : public virtual ::apache::thrift::TBase {
 public:

  DataBuffer(const DataBuffer&);
  DataBuffer(DataBuffer&&);
  DataBuffer& operator=(const DataBuffer&);
  DataBuffer& operator=(DataBuffer&&);
  DataBuffer() : format((DataBufferFormat)0), data() {
    format = (DataBufferFormat)0;

  }

  virtual ~DataBuffer() throw();
  DataBufferFormat format;
  std::string data;

  _DataBuffer__isset __isset;

  void __set_format(const DataBufferFormat val);

  void __set_data(const std::string& val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(DataBuffer &a, DataBuffer &b);

std::ostream& operator<<(std::ostream& out, const DataBuffer& obj);

typedef struct _FrameID__isset {
  _FrameID__isset() : id(false) {}
  bool id :1;
} _FrameID__isset;

class FrameID : public virtual ::apache::thrift::TBase {
 public:

  FrameID(const FrameID&);
  FrameID(FrameID&&);
  FrameID& operator=(const FrameID&);
  FrameID& operator=(FrameID&&);
  FrameID() : id() {
  }

  virtual ~FrameID() throw();
  std::string id;

  _FrameID__isset __isset;

  void __set_id(const std::string& val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(FrameID &a, FrameID &b);

std::ostream& operator<<(std::ostream& out, const FrameID& obj);

typedef struct _ImageFragmentBuffers__isset {
  _ImageFragmentBuffers__isset() : extents(false), pixels(false), depth(false) {}
  bool extents :1;
  bool pixels :1;
  bool depth :1;
} _ImageFragmentBuffers__isset;

class ImageFragmentBuffers : public virtual ::apache::thrift::TBase {
 public:

  ImageFragmentBuffers(const ImageFragmentBuffers&);
  ImageFragmentBuffers(ImageFragmentBuffers&&);
  ImageFragmentBuffers& operator=(const ImageFragmentBuffers&);
  ImageFragmentBuffers& operator=(ImageFragmentBuffers&&);
  ImageFragmentBuffers() {
  }

  virtual ~ImageFragmentBuffers() throw();
  Viewport extents;
  DataBuffer pixels;
  DataBuffer depth;

  _ImageFragmentBuffers__isset __isset;

  void __set_extents(const Viewport& val);

  void __set_pixels(const DataBuffer& val);

  void __set_depth(const DataBuffer& val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ImageFragmentBuffers &a, ImageFragmentBuffers &b);

std::ostream& operator<<(std::ostream& out, const ImageFragmentBuffers& obj);

typedef struct _ImageFragmentInfo__isset {
  _ImageFragmentInfo__isset() : key(false), bounds(false), isOpaque(true) {}
  bool key :1;
  bool bounds :1;
  bool isOpaque :1;
} _ImageFragmentInfo__isset;

class ImageFragmentInfo : public virtual ::apache::thrift::TBase {
 public:

  ImageFragmentInfo(const ImageFragmentInfo&);
  ImageFragmentInfo(ImageFragmentInfo&&);
  ImageFragmentInfo& operator=(const ImageFragmentInfo&);
  ImageFragmentInfo& operator=(ImageFragmentInfo&&);
  ImageFragmentInfo() : key(), isOpaque(false) {
  }

  virtual ~ImageFragmentInfo() throw();
  std::string key;
  BoundingBox2i bounds;
  bool isOpaque;

  _ImageFragmentInfo__isset __isset;

  void __set_key(const std::string& val);

  void __set_bounds(const BoundingBox2i& val);

  void __set_isOpaque(const bool val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ImageFragmentInfo &a, ImageFragmentInfo &b);

std::ostream& operator<<(std::ostream& out, const ImageFragmentInfo& obj);

typedef struct _ImageFragmentList__isset {
  _ImageFragmentList__isset() : totalCount(true), accumCount(true) {}
  bool totalCount :1;
  bool accumCount :1;
} _ImageFragmentList__isset;

class ImageFragmentList : public virtual ::apache::thrift::TBase {
 public:

  ImageFragmentList(const ImageFragmentList&);
  ImageFragmentList(ImageFragmentList&&);
  ImageFragmentList& operator=(const ImageFragmentList&);
  ImageFragmentList& operator=(ImageFragmentList&&);
  ImageFragmentList() : totalCount(0), accumCount(0) {
  }

  virtual ~ImageFragmentList() throw();
  FrameID frame;
  ImageFragmentInfo_list fragments;
  int32_t totalCount;
  int32_t accumCount;

  _ImageFragmentList__isset __isset;

  void __set_frame(const FrameID& val);

  void __set_fragments(const ImageFragmentInfo_list& val);

  void __set_totalCount(const int32_t val);

  void __set_accumCount(const int32_t val);

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(ImageFragmentList &a, ImageFragmentList &b);

std::ostream& operator<<(std::ostream& out, const ImageFragmentList& obj);

} // namespace

#endif
